- JPA 설정
build.gralde에 JPA 의존성을 추가하고, JdbcTemplate 의존성은 제거한다.
JdbcTemplate 의존성을 반드시 제거해야 하는 것은 아니지만 JPA 의존성을 추가하면 
JdbcTemplate 라이브러리도 함께 생기기 때문에 제거해도 된다.

같은 원리로 mybatis-spring-boot-starter 역시 spring-boot-starter-jdbc를 포함하기 때문에
사실 MyBatis를 할 때부터 이미 spring-boot-starter-jdbc를 지웠어도 상관 없었다.

이렇게 빌드하고 나면 External Libraries에 JPA의 구현체인 hibernate와,
Spring Data JPA와 관련된 것들, persistence-api 등이 추가된다.

그리고 main과 test의 resources/application.properties 둘 다에 다음의 내용을 추가한다:
    #JPA log
    logging.level.org.hibernate.SQL=DEBUG
    logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

logging.level.org.hibernate.SQL=DEBUG
    logger를 통해 하이버네이트가 생성하고 실행하는 SQL을 출력해준다.

org.hibernate.type.descriptor.sql.BasicBinder=TRACE
    SQL에 바인딩 되는 파라미터를 확인할 수 있다.

참고로, spring.jpa.show-sql=true 이 설정은 logging.level.org.hibernate.SQL=DEBUG 이 설정과 같은 로그를 출력해주는데,
차이점은 전자는 System.out 콘솔을 통해 SQL을 출력하는 것이고, 후자는 logger를 통해 출력하는 것이다.
따라서 spring.jpa.show-sql=true 설정은 권장하지 않으며, 둘 다 쓰는 것도 로깅이 중복 출력되기 때문에 권장하지 않는다.
중복 출력이 되면 쿼리가 두 번 나가는 것으로 착각할 수 있기도 하고, 가독성도 떨어진다.



- JPA 적용 개발
JPA에서 가장 중요한 부분은 객체와 테이블을 매핑하는 것이다. 
JPA가 제공하는 어노테이션을 사용하여 Item 객체와 테이블을 매핑해보자.


* 엔티티 매핑하기
@Data
@Entity★
public class Item {

    @Id★
    @GeneratedValue(strategy = GenerationType.IDENTITY)★
    private Long id;

    @Column(name = "item_name", length = 50)★
    private String itemName;

    private Integer price;

    private Integer quantity;

    public Item() {
    }

    public Item(String itemName, Integer price, Integer quantity) {
        this.itemName = itemName;
        this.price = price;
        this.quantity = quantity;
    }
}

★ 표시 해놓은 것이 JPA 라이브러리를 추가함으로써 사용할 수 있게 된 것들이다.
이와 같이 JPA는 자바 객체와 DB 테이블을 손쉽게 매핑해주는 어노테이션을 제공한다.

JPA는 엔티티에 public 또는 protected 수준의 기본생성자가 필수이다.
그러므로 @Entity에는 반드시 @NoArgsConstructor가 함께 있어야 한다.


* Repository 만들기

@Slf4j
@Repository
@Transactional
@RequiredArgsConstructor
public class JpaItemRepository implements ItemRepository {

    private final EntityManager em;

    @Override
    public Item save(Item item) {
        em.persist(item);
        return item;
    }

    @Override
    public void update(Long itemId, ItemUpdateDto updateParam) {
        Item foundItem = em.find(Item.class, itemId);
        foundItem.setItemName(updateParam.getItemName());
        foundItem.setPrice(updateParam.getPrice());
        foundItem.setQuantity(updateParam.getQuantity());
    }

    @Override
    public Optional<Item> findById(Long id) {
        Item item = em.find(Item.class, id);
        return Optional.ofNullable(item);
    }

    @Override
    public List<Item> findAll(ItemSearchCond cond) {
        String jpql = "select i from Item i";

        Integer maxPrice = cond.getMaxPrice();
        String itemName = cond.getItemName();
        if (StringUtils.hasText(itemName) || maxPrice != null) {
            jpql += " where";
        }
        boolean andFlag = false;
        if (StringUtils.hasText(itemName)) {
            jpql += " i.itemName like concat('%',:itemName,'%')";
            andFlag = true;
        }
        if (maxPrice != null) {
            if (andFlag) {
                jpql += " and";
            }
            jpql += " i.price <= :maxPrice";
        }
        log.info("jpql={}", jpql);
        TypedQuery<Item> query = em.createQuery(jpql, Item.class);
        if (StringUtils.hasText(itemName)) {
            query.setParameter("itemName", itemName);
        }
        if (maxPrice != null) {
            query.setParameter("maxPrice", maxPrice);
        }
        
        return query.getResultList();
    }
}

private final EntityManager em;
    스프링을 통해 엔티티 매니저를 주입 받은 것을 볼 수 있다. JPA의 모든 동작은 엔티티 매니저를 통해 이루어지기 때문이다.
    엔티티 매니저는 내부에 DataSource를 갖고 있어 DB에 접근할 수 있다.

@Transactional
    JPA의 모든 데이터 변경은 트랜잭션 안에서 이루어져야 한다. 일반적으로 @Transactional은 서비스 계층에서 시작하기 때문에
    서비스 계층에 걸어주었다면 Repository에 안 걸어줘도 문제가 없다. 그러나 이번 예제는 복잡한 비즈니스 로직이 없기 때문에
    서비스 계층에 @Transactional을 걸지 않아서 Repository에 걸어준 것이다.
    다시 한 번 강조하지만 일반적으로 @Transactional은 비즈니스 로직을 시작하는 서비스 계층에 걸어주는 것이 맞다.


* 참고
사실 JPA 관련 설정을 하기 위해서는 EntityManagerFactory, JPA 트랜잭션 매니저, DataSource 등 다양한 설정을 해주어야 한다.
그러나 예제에서 이러한 과정이 생략된 이유는 바로 스프링 부트 덕분이다. 스프링 부트가 저러한 과정들을 모두 자동화해준 것이다.
스프링 부트의 자동 설정은 JpaBaseConfiguration.class의 코드를 참고하자.


* JPA 설정을 애플리케이션에 임포트하기
이제 JpaConfig를 작성하고 애플리케이션에 @Import 해주자.

@Configuration
@RequiredArgsConstructor
public class JpaConfig {

    private final EntityManager em;

    @Bean
    public ItemRepository itemRepository() {
        return new JpaItemRepository(em);
    }

    @Bean
    public ItemService itemService() {
        return new ItemServiceV1(itemRepository());
    }
}
ItemRepository와 ItemService의 스프링 빈 등록과 관련된 설정을 위해 JpaConfig 작성


@Import(JpaConfig.class)
@SpringBootApplication(scanBasePackages = "hello.itemservice.web")
@Slf4j
public class ItemServiceApplication {
    ...
}
애플리케이션에서 JpaConfig 설정을 적용하도록 변경

참고로, 테스트를 돌려보면 다 성공하긴 하는데 updateItem의 경우 update 쿼리가 안 나온다.
원래 JPA에서 update 쿼리는 변경 내역이 캐시에만 저장되어 있다가 commit될 때 update 쿼리가 나가는데,
테스트 환경에서는 @Transactional이 commit이 아닌 rollback을 하기 때문에 update 쿼리를 볼 수 없는 것이다.
만약 테스트 환경에서 update 쿼리를 보고 싶다면 @Commit을 메서드 위에 달아주면 된다.

* 참고:
JPQL에서 파라미터는 다음과 같이 입력한다:
    where price <= :maxPrice

그 후 파라미터 바인딩은 다음과 같이 해준다:
    jpql.setParameter("maxPrice", maxPrice)



- JPA 예외 변환
JPA의 경우 예외가 발생하면 JPA 예외가 발생한다.
EntityManager는 순수한 JPA 기술이고, 스프링과는 관계가 없다. 따라서 EntityManager는 예외가 발생하면
JPA 관련 예외를 발생시킨다. 이 예외는 PersistenceException과 그 하위들이다.
추가적으로, JPA는 IllegalStateException과 IllegalArgumentException을 발생시킬 수 있다.
그렇게 되면 서비스 계층이 JPA 예외를 떠받게 되어 서비스에서도 결국 JPA 예외를 처리하거나 떠넘겨야 하고,
그렇게 되면 JPA 예외를 import 할 수밖에 없게되어 서비스가 JPA 기술에 종속되게 된다. 즉, 서비스의 순수성에 해가 된다.

그렇다면 JPA 예외를 스프링 예외 추상화인 DataAccessException으로 어떻게 변환시킬 수 있을까?
그 비밀은 바로 @Repository 어노테이션에 있다. 실제로,
@Repository 어노테이션이 없으면 JPA 예외가 발생하고,
@Repository 어노테이션이 있으면 DataAccessException이 발생한다.
어노테이션을 주석 처리하고 쿼리에 오타를 일부러 내서 어떤 예외가 발생하는지 로그를 살펴보면 알게 된다.

@Repository는 컴포넌트 스캔의 대상이 된다. 그렇기 때문에 @Repository가 붙은 클래스는 예외 변환 AOP의 적용 대상이 된다.
스프링과 JPA를 함께 사용하게 되면 스프링은 JPA 예외 변환기인 PersistenceExceptionTranslator를 빈으로 등록한다.
예외 변환 AOP 프록시는 JPA 관련 예외가 발생하면 이 PersistenceExceptionTranslator를 통해 
JPA 예외를 스프링의 DataAccessException 예외로 변환시켜준다.

@Service는 그냥 컴포넌트 스캔의 대상이 되는 것 외에는 특별한 기능이 없는 깡통인데 @Repository는 이러한 기능도 갖고 있는 것이다.

예외 변환 과정은 다음과 같다:
1) EntityManager에서 PersistenceException(순수 JPA 예외) 발생
2) EntityManager가 자신을 호출한 Repository로 PersistenceException을 떠넘김
3) Repository는 서비스가 아닌, AOP 프록시 Repository로 PersistenceException을 떠넘김
4) AOP 프록시에서 PersistenceException을 DataAccessException으로 변환시킴
5) 변환된 DataAccessException이 서비스로 던져짐
6) 서비스에서 처리 또는 스프링 예외 추상화 사용

실제로 itemRepository.getClass() 를 로그 찍어보면 JpaItemRepository$$EnhancerBySpringCGLIB$$c48d2e07 이런 클래스로 나온다.
진짜 원본 Repository 클래스가 아닌 CGLIB 방식으로 생성된 프록시 리포지토리 객체라는 의미다.
이 객체가 바로 예외 변환을 해주느 프록시 객체이다.
AOP 프록시 객체가 만들어지는 이유는 또 @Transactional 때문이기도 한데 이는 이례적인 상황이므로 고려하지 않겠다.

