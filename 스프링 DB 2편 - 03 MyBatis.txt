- MyBatis 소개
MyBatis는 JdbcTemplate보다 더 많은 기능을 제공하는 SQL Mapper이다.
기본적으로 JdbcTemplate이 제공하는 대부분의 기능을 제공하며, SQL을 XML에 편리하게 작성할 수 있고,
동적 쿼리를 매우 편리하게 작성할 수 있다는 장점이 있다.

JdbcTemplate에서 여러 줄에 걸쳐 SQL을 작성하려면 문자열을 쌍 따옴표로 열었다 닫았다 해야 해서 오타가 발생하기 쉽다.
그러나 MyBatis는 xml에 아래와 같이 편리하게 작성할 수 있다:

<update id="update">
    update item
    set item_name${itemName},
        price=${price},
        quantity=${quantity}
    where id = ${id}
</update>

MyBatis는 XML에 작성하기 때문에 라인이 길어져도 문자열을 더하는 것보다는 편하다.


동적 쿼리도 마찬가지로, JdbcTemplate의 동적 쿼리를 살펴 보았듯이, 조건문에 따라 문자열을 더해주는 방식이다 보니
여전히 오타가 발생할 위험이 높다. 하지만 MyBatis는 SQL을 작성할 때 xml 태그가 지원이 되어 오타가 발생할 위험이 훨씬 줄어든다.

    <select id="findAll> resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat{'%',#{itemName},'%'}
            </if>
            <if test="maxPrice != null>
                and price <= #{maxPrice}
            </if>
        </where>
    </select>

다만, JdbcTemplate과는 달리, MyBatis는 스프링에 내장된 기능이 아니기 때문에 별도의 설정이 필요하다.

프로젝트에서 동적 쿼리와 복잡한 쿼리가 많다면 MyBatis를 사용하고, 단순한 쿼리들이 많으면 JdbcTemplate을 사용하면 된다.
물론 둘을 함께 사용해도 된다. 하지만 MyBatis를 선택했다면 그것으로 충분할 것이다.
사실 JPA, Spring Data JPA, Querydsl을 사용하게 되면 Mybatis 조차도 사용하게 될 일이 드물다.
ORM 기술 스택을 사용하는 경우에는 ORM을 메인으로 사용하고, 가끔 네이티브 쿼리를 써야할 때가 생기면 
동적 쿼리가 필요 없으면 JdbcTemplate, 동적 쿼리가 필요하면 MyBatis 정도로 해결이 된다. 

MyBatis는 기능도 단순하고 공식 사이트도 누군가가 한글로 잘 번역해주어서 원하는 기능을 편리하게 찾아볼 수 있다.



- MyBatis 설정하기
* 라이브러리 추가
build.gradle에 MyBatis 라이브러리를 추가한다:
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0'
(버전은 스프링 부트 버전에 따라 달라질 수 있음)

H2나 lombok 같은 것들은 버전을 적지 않아도 되는 이유는 Spring에서 공식적으로 관리하기 때문에
버전을 적지 않아도 알아서 맞는 버전으로 라이브러리를 가져오기 때문이다.
하지만 MyBatis는 Spring에서 공식적으로 관리하지 않으므로 개발자가 직접 스프링 버전에 맞게 작성해주어야 한다.

위 코드를 빌드하면 다음과 같은 라이브러리가 추가된다:
    mybatis-spring-boot-starter: MyBatis를 스프링 부트에서 편리하게 사용할 수 있게 시작하는 라이브러리
    mybatis-spring-boot-autoconfigure: MyBatis와 스프링 부트 설정 라이브러리
    mybatis-spring: MyBatis와 스프링을 연동하는 라이브러리
    mybatis: MyBatis 라이브러리

참고: 패키지명이 ibatis라는 것도 있는데 이는 mybatis의 예전 버전이다. 아직 ibatis라는 이름이 남아 있는 것들이 있다.


* application.properties 환경변수 추가
참고로, main에 있는 설정 파일과 test에 있는 설정 파일 모두에 추가해주어야 한다.
다음의 내용을 추가한다:
    #MyBatis
    mybatis.type-aliases-package=hello.itemservice.domain
    mabatis.configuration.map-underscore-to-camel-case=true
    logging.level.hello.itemservice.repository.mybatis=trace

mybatis.type-aliases-package
    MyBatis에서 타입 정보를 사용할 때 패키지 이름을 적어주어야 하는데, 여기에 패키지명을 명시하면 패키지 이름을 생략할 수 있다.
    또, 여기에 입력한 패키지명과 그 하위 패키지가 자동으로 인식된다.
    여러 위치를 지정하고 싶다면 콤마(,)와 세미콜론(;)으로 구분하면 된다.

mabatis.configuration.map-underscore-to-camel-case
    JdbcTemplate의 BeanPropertyRowMapper에서처럼 언더바를 카멜로 자동 변경해주는 기능을 활성화한다.
    마찬가지로 컬럼 이름과 객체 이름이 완전히 다를 경우 조회 SQL에서 별칭을 사용해준다.
    기본이 false이기 때문에 true로 넣어주는 것이 좋다.

logging.level.hello.itemservice.repository.mybatis
    logging.level.(원하는 패키지 위치).mybatis
    지정한 위치에서 MyBatis가 실행되는 쿼리 로그를 띄워주는 기능이다.



- MyBatis 적용하기: 기본
MyBatis는 쿼리를 XML에 작성한다는 점을 제외하면 JDBC를 반복을 줄여준다는 점에서 JdbcTemplate과 거의 유사하다.

먼저, MyBatis 사용을 위한 Mapper 인터페이스를 생성한다:

package hello.itemservice.repository.mybatis;

@Mapper
public interface ItemMapper {

    void save(Item item);

    void update(@Param("id") Long id, @Param("updateParam")ItemUpdateDto updateParam);

    List<Item> findAll(ItemSearchCond itemSearch);

    Optional<Item> findById(Long id);
}

이 인터페이스는 MyBatis 매핑 XML을 호출해주는 매퍼 인터페이스로, @Mapper 애너테이션을 붙여주어야 MyBatis에서 인식할 수 있다.
이 인터페이스의 메서드를 호출하면 다음에 보이는 xml 파일의 SQL을 실행하고 결과를 돌려준다:

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hello.itemservice.repository.mybatis.ItemMapper">

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>

    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
            price=#{updateParam.price},
            quantity=#{updateParam.quantity}
        where id = #{id}
    </update>

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%',#{itemName},'%')
            </if>
            <if test="maxPrice != null">
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>

</mapper>

참고로, 이 파일은 자바 코드가 아니기 때문에 src/main/resources 하위에 만들어야 하는데, 
패키지 위치를 맞춰줘야 하기 때문에 다음의 위치에 생성한다:
    src/main/resources/hello/itemservice/repository/mybatis/ItemMapper.xml
이때, xml 파일의 이름은 인터페이스명과 똑같아야 한다. 

<mapper> 태그의 namespace 값은 해당 xml 파일을 지정하는 인터페이스 파일의 패키지명과 파일명을 정확히 입력해야 한다.
그렇게 해야 인터페이스와 xml 파일이 서로 연동이 된다.
참고로, resources 하위에 패키지 구조를 저렇게 복잡하게 한 이유는 오히려 xml 파일이 쌓일수록 저 방식이 가장 관리하기 좋아지기 때문이다.
resources 하위에 인터페이스 파일의 패키지 상 위치와 똑같은 디렉토리 구조로 일부러 맞춘 것이다.
저렇게 하지 않으면 파일이 쌓일수록 파일이 여러 군데에 분산된다.

    package hello.itemservice.repository.mybatis;

    @Mapper
    public interface ItemMapper {
        ...
    }

저렇게 디렉토리를 굳이 겹겹이 쌓아서 만들기 싫다면 application.properties에서 다음과 같이 설정한다:
    mybatis.mapper-locations=classpath:mapper/**/*.xml

이렇게 하면 resources/mapper 디렉토리 아래에 있는 XML을 인터페이스와 매칭할 매핑 파일로 인식한다.
XML 파일 이름은 자유롭게 설정해도 된다. 그러나 namespace 속성으로 매칭은 잘 해주어야 한다.

참고로, test 디렉토리에 있는 application.properties 파일에도 동일한 설정을 해주어야 한다.
그렇게 하지 않으면 test가 잘 돌아가지 않는다.



- XML 쿼리 코드 설명
이제 각각의 쿼리문을 살펴보자:
* insert 쿼리
    void save(Item item);

    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        values (#{itemName}, #{price}, #{quantity})
    </insert>

    insert 쿼리를 지정하는 XML 태그는 <insert></insert>이다.
    여기서, id 속성은 매퍼 인터페이스에 있는 저장 메서드명을 적어주면 된다. 예제의 경우 save() 메서드이므로 id="save" 이다. 
    파라미터는 #{ } 문법으로 바인딩해준다. #{ } 내부에 들어갈 파라미터명은 테이블 컬럼명이 아니라 객체 프로퍼티 이름 기준이다. 
    #{ }는 사실상 PreparedStatement를 사용하는 것이나 마찬가지로, JDBC의 '?'를 치환하는 것이라 생각하면 된다.
    *** ${ } 가 아니라는 것에 주의할 것. MyBatis는 딸라 표시가 아니라 샾이다. ***
    useGeneratedKey 속성은 DB에게 키 생성을 위임하는 IDENTITY 전략일 때 사용한다. 
    keyProperty는 생성되는 키의 프로퍼티 이름을 지정해준다. insert가 끝나면 item 객체의 id 속성에 생성된 값이 입력된다.


* update 쿼리
    void update(@Param("id") Long id, @Param("updateParam")ItemUpdateDto updateParam);

    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
            price=#{updateParam.price},
            quantity=#{updateParam.quantity}
        where id = #{id}
    </update>
    
    update 쿼리를 지정하는 XML 태그는 <update></update>이다.
    여기서는 메서드의 파라미터가 Long id, ItemUpdateDto updateParam 이렇게 두 개이다.
    메서드의 파라미터가 1개였다면 @Param을 지정하지 않아도 되지만,
    파라미터가 2개 이상이면 @Param으로 이름을 지정해서 파라미터를 구분해야 한다.
    그래서 #{itemName}이 아니라 #{updateParam.itemName} 이런 식이 되는 것이다.


* select findById 쿼리
    Optional<Item> findById(Long id);

    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    select 쿼리를 지정하는 XML 태그는 <select></select>이다.
    resultType 속성은 반환 타입을 명시한다. 예제에서는 결과를 Item 객체에 매핑해야 하기 때문에 Item이라고 지정했다.

    만약 application.properties에서 mybatis.type-aliases-package=hello.itemservice.domain 이 내용을 적지 않았다면
    resultType="hello.itemservice.domain.Item" 이렇게 적어야 했을 것이다. 위 속성 덕분에 패키지명을 생략할 수 있는 것이다.
    이렇게 resultType만 적어주면 마치 JdbcTemplate의 BeanPropertyRowMapper처럼 쿼리의 결과를 객체로 편리하게 변환해주는 것이다.
    
    참고로, application.properties에서 mabatis.configuration.map-underscore-to-camel-case=true 이 내용 덕분에
    쿼리 결과 컬럼명인 스네이크 표기법을 객체 속성의 카멜 표기법으로 자동으로 변환해서 객체를 만들어준다.

    자바 코드에서 반환 객체가 하나이면 Item, Optional<Item>과 같이 사용하면 되고, 반환 객체가 하나 이상이면
    컬렉션을 사용하면 된다(주로 List).


* select findAll 쿼리
    List<Item> findAll(ItemSearchCond itemSearch);

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%',#{itemName}, '%')
            </if>
            <if test="maxPrice != null">
                and price &lt;= ${maxPrice}
            </if>
        </where>
    </select>

    MyBatis는 <where> 태그와 <if> 태그를 통해 동적 쿼리 문법을 지원한다.
    <where>는 조건 만족 여부에 따라 적절하게 where 문장을 만들어준다. 
    <if>는 test 조건이 만족하면 구문을 추가해준다.
    즉, 예제에서 <if test ="~"> 조건부가 모두 false이면 where 문장 자체가 안 만들어지고,
    조건부가 true인 것이 처음 나타나면 문장에 있는 'and'라는 글씨를 'where'로 바꿔서 문장이 추가되고,
    두 번째 true부터는 and 그대로 문장이 추가된다.

    참고로, 저 &lt;는 태그 내에서 부등호 기호(> 또는 <) 특수문자를 사용할 수 없어서 대신 써준 것이다.
    <    &lt;		lt는 less than의 줄임말
    >    &gt;		gt는 greater than의 줄임말
    &    &amp;		amp는 ampersand의 줄임말

 

- MyBatis 적용하기
    @Repository
    @RequiredArgsConstructor
    public class MyBatisItemRepository implements ItemRepository {
        private final ItemMapper itemMapper;
        ...
    }

ItemMapper에는 @Mapper라는 어노테이션이 있었다. 그 어노테이션이 있으면 스프링에서 자동으로 인식해서 
인터페이스의 프록시 구현체를 자동으로 만들어내고 스프링 빈으로 등록해준다. 
그렇기 때문에 위와 같이 ItemMapper를 구현체 클래스에 주입해주면 클래스에서 할 게 그렇게 많지 않다:

    @Repository
    @RequiredArgsConstructor
    public class MyBatisItemRepository implements ItemRepository {

        private final ItemMapper itemMapper;

        @Override
        public Item save(Item item) {
            itemMapper.save(item);
            return item;
        }

        @Override
        public void update(Long itemId, ItemUpdateDto updateParam) {
            itemMapper.update(itemId, updateParam);
        }

        @Override
        public Optional<Item> findById(Long id) {
            return itemMapper.findById(id);
        }

        @Override
        public List<Item> findAll(ItemSearchCond cond) {
            return itemMapper.findAll(cond);
        }
    }

보면 다 위임 코드이고 특별히 한 게 없다. 이 Repository는 인터페이스에게 위임하는 기능만 하는 것이고,
실제 동작하는 Repository는 위에서 언급한 것처럼 이미 스프링 빈으로 등록되어 있던 다른 프록시 구현체이다.
단, 더 해야할 작업이 있다. 바로 Config 작업이다.



- MyBatisConfig
    @Configuration
    @RequiredArgsConstructor
    public class MyBatisConfig {

        private final ItemMapper itemMapper;

        @Bean
        public ItemRepository itemRepository() {
            return new MyBatisItemRepository(itemMapper);
        }

        @Bean
        public ItemService itemService() {
            return new ItemServiceV1(itemRepository());
        }
    }

ItemService 부분은 JdbcTemplateV3Config와 똑같다.
MyBatis 모듈이 DataSource와 트랜잭션 매니저를 다 읽어서 ItemMapper와 연결시켜주기 때문에
Repository 생성자에는 ItemMapper를 주입해주면 된다.



- MyBatis의 구현체
ItemMapper 인터페이스를 구현한 클래스가 없는데 어떻게 동작한 것일까?
MyBatisItemRepository는 단순히 인터페이스 메서드에 단순히 위임하기만 했을 뿐이다.
이럴 거면 뭐하러 implements 했나 싶을 정도로 내용도 없고 단순 위임 로직이었다.
인터페이스는 심지어 스프링 빈으로 등록되지도 않는다. 스프링 빈으로 등록되는 것들은 인터페이스나 클래스가 아닌 인스턴스들이다.
심지어 스프링 빈도 아닌데 MyBatisItemRepository에 itemMapper 의존성이 어떻게 주입이 된 걸까?

사실은 다음과 같은 과정들이 일어난다:
1) MyBatis 스프링 연동 모듈에서 @Mapper 어노테이션이 달린 ItemMapper 인터페이스를 인식한다.
2) @Mapper 인터페이스를 인식한 후 동적으로 ItemMapper를 구현하는 프록시 객체를 생성한다. 이게 실제 ItemMapper의 구현체이다.
   AOP에서 프록시 기술을 사용하듯이 말이다.
3) MyBatis 스프링 연동 모듈이 이 구현체를 스프링 컨테이너에 스프링 빈으로 등록시킨다.

그러므로 사실 아래 코드에 주입 받은 것은 인터페이스가 아니라 연동 모듈이 만들어 준 동적 프록시 객체인 것이었다.
        @Bean
        public ItemRepository itemRepository() {
            return new MyBatisItemRepository(itemMapper);
        }

save 로직에 getClass() 메서드로 클래스를 확인해보면 
    @Override
    public Item save(Item item) {
        log.info("itemMapper class = {}", itemMapper.getClass());   // class jdk.proxy2.$Proxy66
        itemMapper.save(item);
        return item;
    }

class jdk.proxy2.$Proxy66 뭐 이런 게 출력된다. 
라이브러리를 통해 실시간으로 동적으로 만들어진 클래스가 바로 이 $Proxy66이다.
이렇게 자동으로 생성되는 프록시 객체 덕분에 MyBatis를 사용하면 인터페이스만으로 편리하게 XML의 데이터를 찾아서 호출할 수 있다.
이 프록시 객체는 단순히 XML 쿼리와 인터페이스를 연결해주는 것에 그치지 않고, JdbcTemplate에서처럼
SQLException이 발생하면 스프링 예외 추상화 클래스인 DataAccessException에 맞게 런타임 예외로 변환해서 반환해준다. 



- MyBatis 기능 정리1 - 동적 쿼리
MyBatis의 최고의 기능이자 MyBatis를 사용하는 이유인 동적 SQL에 대해 알아보자.
MyBatis가 동적 쿼리를 위해 제공해주는 기능은 다음과 같다:
    if
    choose (when, otherwise)
    trim (where, set)
    foreach

MyBatis 공식 매뉴얼에서 제공하는 예제를 통해 자세히 알아보자. if 는 위의 예제를 통해 살펴보았으므로 생략한다.

choose / when / otherwise는 자바의 switch 구문과 유사하다.
<select id="findActiveBlogLike" resultType="Blog">
    SELECT * FROM BLOG WHERE state = ‘ACTIVE’
    <choose>
        <when test="title != null">
            AND title like #{title}
        </when>
        <when test="author != null and author.name != null">
            AND author_name like #{author.name}
        </when>
        <otherwise>
            AND featured = 1
        </otherwise>
    </choose>
</select>
when에 해당되는 것이 선택되는 것이며, when이 모두 false인 경우 otherwise 부분이 문장으로 구성된다.



- MyBatis 기능 정리2 - 그 외
* 어노테이션으로 SQL 작성하기
@Select("select id, item_name, price, quantity from item where id=#{id}")
Optional<Item> findById(Long id);

이런 식으로 인터페이스 파일에서 바로 어노테이션으로 쿼리를 작성하는 것이다.
어노테이션은 @Insert, @Update, @Delete, @Select 기능이 제공된다.
대신, 어노테이션을 사용할 경우엔 XML에 정의된 쿼리 부분은 주석 처리하거나 지워야 한다.

