- 트랜잭션 커밋과 롤백 복습

@SpringBootTest
@Slf4j
public class BasicTxTest {

    @Autowired
    PlatformTransactionManager txManager;

    @TestConfiguration
    static class Config {
        // 원래 스프링이 자동으로 트랜잭션 매니저를 등록해주지만 이렇게 트랜잭션 매니저 빈을 직접 등록하면
        // 직접 등록한 트랜잭션 매니저를 사용하게 된다.
        @Bean
        public PlatformTransactionManager txManager(DataSource dataSource) {
            return new DataSourceTransactionManager(dataSource);
        }
    }

    @Test
    void commit() {
        log.info("트랜잭션 시작");
        TransactionStatus status = txManager.getTransaction(new DefaultTransactionAttribute());

        log.info("트랜잭션 커밋 시작");
        txManager.commit(status);
        log.info("트랜잭션 커밋 완료");
    }
}

일단 @Autowired를 보면 트랜잭션 매니저 인터페이스를 주입받고 있다. 이때, @TestConfiguration를 보면
이 트랜잭션 매니저의 구현체를 DataSourceTransactionManager(dataSource) 빈으로 등록하는 모습을 볼 수 있다.
결과적으로 @Autowired 로 인해 주입되는 트랜잭션 매니저는 DataSourceTransactionManager(dataSource)가 된다.

이러한 의존성 주입을 바탕으로 테스트 코드들을 작성할 것이다.
commit 테스트 코드는 일반적인 트랜잭션 시작과 커밋 로직을 보여주고 있다.
txManager.getTransaction()을 통해 트랜잭션을 시작할 수 있다.

getTransaction() 메서드에 파라미터를 넣었는데, 파라미터 객체를 넣으면 트랜잭션의 기본 속성을 지정하게 된다.
이 객체는 전파 수준(propagation behavior), 격리 수준(isolation level), 타임아웃(timeout) 등의 기본 설정을 포함하고 있다.
new DefaultTransactionAttribute() 를 파라미터로 넣게 되면 Propagation.REQUIRED와 같은 설정을 사용한다.
이는 기존 트랜잭션이 있으면 그 트랜잭션에 참여하고, 그렇지 않으면 새 트랜잭션을 시작한다는 설정이다.

txManager.getTransaction()는 TransactionStatus 타입의 객체를 반환하며, 
TransactionStatus 객체는 트랜잭션이 활성화 되었는지, 새로운 트랜잭션인지 등 트랜잭션의 진행 상태와 관련된 정보를 담고 있다.
commit() 메서드나 rollback() 메서드에 이 TransactionStatus 객체를 파라미터로 입력해야 트랜잭션이 정상적으로 종료된다.



- commit 테스트 로그 살펴보기(줄바꿈은 로그가 아니라 작성자가 편집한 것임)
트랜잭션 시작
Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
Acquired Connection [HikariProxyConnection@1022823162 wrapping conn0: url=jdbc:h2:mem:(UUID 생략) user=SA] for JDBC transaction
Switching JDBC Connection [HikariProxyConnection@1022823162 wrapping conn0: url=jdbc:h2:mem:(UUID 생략) user=SA] to manual commit

트랜잭션 커밋 시작
Initiating transaction commit
Committing JDBC transaction on Connection [HikariProxyConnection@1022823162 wrapping conn0: url=jdbc:h2:mem:(UUID 생략) user=SA]
Releasing JDBC Connection [HikariProxyConnection@1022823162 wrapping conn0: url=jdbc:h2:mem:(UUID 생략) user=SA] after transaction
트랜잭션 커밋 완료

* Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
    - DataSourceTransactionManager가 새로운 트랜잭션을 생성하고 있음을 알리는 로그이다.    
    - PROPAGATION_REQUIRED는 이 트랜잭션은 전파 수준이 'REQUIRED'라는 의미이다.   
      이는 기존에 트랜잭션이 있으면 해당 트랜잭션을 사용하고, 없으면 새로운 트랜잭션을 시작한다는 의미이다.
    - ISOLATION_DEFAULT는 트랜잭션의 격리 수준을 DEFAULT, 즉 기본값으로 정한다는 뜻이며,
      실제 적용 기본값은 DB에 따라 달라진다.
    
* Acquired Connection [HikariProxyConnection ~ (생략)
    - DataSourceTransactionManager가 JDBC 트랜잭션을 위해
      HikariCP(Hikari Connection Pool)에서 데이터베이스 연결(Connection)을 가져왔다는 의미이다.
    - HikariProxyConnection@76933283 wrapping conn0 이 부분은 실제 연결 객체를 래핑하는 프록시 객체를 의미한다.
      이 프록시는 HikariCP에서 관리하는 연결을 감싸고 있으며, 실제 DB 연결에 대한 작업을 중개한다.
    - url 부분은 H2 메모리 DB에 대한 연결 URL이다. 
    - user-SA 부분은 DB 연결에 사용된 사용자 이름이 'SA'임을 나타낸다. H2 DB의 기본 사용자 이름이기도 하다.

* Switching JDBC Connection [HikariProxyConnection ~ (생략)
    - DataSourceTransactionManager가 해당 DB Connection의 커밋 모드를 수동으로 전환했다는 의미이다.
      수동으로 전환한다는 것은 트랜잭션이 완료되기 전까지 커밋되지 않게 한다는 의미로, 트랜잭션을 시작하기 위한 작업이다.

* Initiating transaction commit
    - DataSourceTransactionManager가 트랜잭션 커밋을 시작하고 있다는 메시지.
      이는 DB에 보류 중인 모든 작업이 커밋될 준비가 되었음을 의미한다. 

* Committing JDBC transaction on Connection [HikariProxyConnection ~ (생략)
    - DataSourceTransactionManager가 해당 DB 연결에서 JDBC 트랜잭션을 커밋하고 있음을 의미한다.
      이제까지 이 트랜잭션 내에서 실행된 모든 SQL 명령을 DB에 영구적으로 반영하겠다는 것이다.

* Releasing JDBC Connection [HikariProxyConnection ~ (생략)
    - 트랜잭션이 완료된 후 DataSourceTransactionManager가 해당 DB Connection을 반환하거나 해제하고 있음을 의미한다.
      이 연결은 HikariCP에 의해 관리되며, pool로 반환되어 다른 트랜잭션이나 작업에서 재사용될 수 있다.



- rollback 테스트와 로그
    @Test
    void rollback() {
        log.info("트랜잭션 시작");
        TransactionStatus status = txManager.getTransaction(new DefaultTransactionAttribute());

        log.info("트랜잭션 롤백 시작");
        txManager.rollback(status);
        log.info("트랜잭션 롤백 완료");
    }

commit 테스트의 로그와 차이나는 부분은 다음과 같다: 
트랜잭션 롤백 시작
Initiating transaction rollback
Rolling back JDBC transaction on ... (생략)
Releasing JDBC Connection  ... (생략)
트랜잭션 롤백 완료



- 트랜잭션을 두 번 사용하는 일반적인 경우
    @Test
    void differentTransaction1() {
        log.info("트랜잭션1 시작");
        TransactionStatus status1 = txManager.getTransaction(new DefaultTransactionAttribute());
        log.info("트랜잭션1 커밋 시작");
        txManager.commit(status1);
        log.info("트랜잭션1 커밋 완료");

        log.info("트랜잭션2 시작");
        TransactionStatus status2 = txManager.getTransaction(new DefaultTransactionAttribute());
        log.info("트랜잭션2 커밋 시작");
        txManager.commit(status2);
        log.info("트랜잭션2 커밋 완료");
    }

로그를 보면 HikariProxyConnection@(숫자)에서 숫자가 트랜잭션마다 서로 다르다.
다만 두 트랜잭션 모두 conn0 이라고 나온다.
이는 트랜잭션1이 시작될 때 커넥션 풀에서 conn0을 획득하고, 트랜잭션1이 끝난 후에 conn0을 반납하며,
트랜잭션2가 시작되면 다시 커넥션 풀에서 conn0을 획득하고 반납하기 때문에 그런 것이다.

HikariProxyConnection@(숫자)에 있는 숫자가 서로 다른 숫자이기 때문에 커넥션이 재사용 된 것일 뿐,
두 트랜잭션의 프록시 커넥션 객체 자체가 서로 다르므로 다른 커넥션으로 보는 것이 맞다.
여기서 '서로 다르다'는 말의 의미는 equals() 메서드를 했을 때 false가 나오는 것으로 생각하면 된다. 
즉, Connection의 껍데기는 conn0으로 같지만 프록시 커넥션 객체의 내용물은 서로 다르기 때문에 다른 Connection이라는 의미이다.

이렇게 Connection이 서로 다르기 때문에 트랜잭션을 각자 관리하게 되고, 두 트랜잭션을 하나로 묶을 수 없다.
예를 들어 트랜잭션1이 커밋하고, 트랜잭션2가 롤백하는 경우에는
트랜잭션1에서 저장한 데이터는 커밋되고, 트랜잭션2에서 저장한 데이터는 롤백된다. 둘이 서로 독립적으로 움직인다.
관련 테스트 코드가 있지만 큰 의미가 없으므로 코드는 메모장에 옮겨 적지 않도록 하겠다.



- 스프링이 제공하는 트랜잭션 전파 기본 개념 (REQUIRED 기준)
만약 한 트랜잭션이 종료되기 전에 트랜잭션 내부에 새로운 트랜잭션을 추가하면 어떻게 될까?
이때 기존의 트랜잭션을 '외부 트랜잭션', 내부에 추가된 트랜잭션을 '내부 트랜잭션'이라 부른다.
이러한 상황에서 어떻게 동작할지에 대한 설정을 해주는 것이 바로 트랜잭션 전파 설정이다.
스프링은 다양한 트랜잭션 전파 옵션을 제공하는데, 여기서는 가장 흔하게 사용되는 REQUIRED 기준으로 설명할 예정이다.
REQUIRED 전파 옵션은 기존에 트랜잭션이 있으면 해당 트랜잭션을 사용하고, 없으면 새로운 트랜잭션을 시작한다.

스프링은 전파 방식을 'REQUIRED'를 기본값으로 하며,
위와 같은 상황에서 외부 트랜잭션과 내부 트랜잭션을 묶어서 하나의 트랜잭션으로 만들어준다.
그렇게 되면 내부 트랜잭션이 외부 트랜잭션에 참여하게 된다.

스프링에서는 이러한 상황을 '물리 트랜잭션'과 '논리 트랜잭션' 개념으로 설명한다.
여기서 외부 트랜잭션과 내부 트랜잭션은 논리 트랜잭션이라 부르고,
두 트랜잭션을 묶어서 형성된 하나의 전체 트랜잭션을 물리 트랜잭션이라 부른다.

실제 DB에 적용되는 트랜잭션은 바로 물리 트랜잭션이고,
논리 트랜잭션은 트랜잭션 매니저를 통해 트랜잭션을 사용하는 단위이다.
논리 트랜잭션 개념은 트랜잭션이 진행되는 중에 내부에 추가로 트랜잭션을 사용하는 경우에 나타난다.
단순히 트랜잭션이 하나일 경우에는 물리고 논리고 하는 개념이 없다.



- REQUIRED 전파 방식의 기본 원칙
* 모든 논리 트랜잭션이 커밋되어야 물리 트랜잭션이 커밋된다.
* 여러 논리 트랜잭션 중 단 하나의 논리 트랜잭션이라도 롤백 되면 물리 트랜잭션 전체가 롤백된다.



- 물리 트랜잭션이 정상적으로 커밋되는 예제
    @Test
    void innerTransaction1() {
        log.info("외부 트랜잭션 시작");
        TransactionStatus outer = txManager.getTransaction(new DefaultTransactionAttribute());
        log.info("outer.isNewTransaction() = {}", outer.isNewTransaction());

        log.info("내부 트랜잭션 시작");
        TransactionStatus inner = txManager.getTransaction(new DefaultTransactionAttribute());
        log.info("inner.isNewTransaction() = {}", inner.isNewTransaction());

        log.info("내부 트랜잭션 커밋");
        txManager.commit(inner);

        log.info("외부 트랜잭션 커밋");
        txManager.commit(outer);
    }

외부 트랜잭션 시작
Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
Acquired Connection [HikariProxyConnection@ ... (생략)
Switching JDBC Connection [HikariProxyConnection@ ... (중략) ... to manual commit
outer.isNewTransaction() = true
내부 트랜잭션 시작
Participating in existing transaction
inner.isNewTransaction() = false
내부 트랜잭션 커밋
외부 트랜잭션 커밋
Initiating transaction commit
Committing JDBC transaction on Connection [HikariProxyConnection@ ... (생략)
Releasing JDBC Connection [HikariProxyConnection@ ... (생략)

코드를 보면 커밋을 두 번 호출했다.
    txManager.commit(inner);    
    txManager.commit(outer);

지금까지는 하나의 트랜잭션은 하나의 Connection에서 한 번만 커밋 또는 롤백을 호출할 수 있다고 배워왔다.
그렇기 때문에 커밋이나 롤백을 하면 그 Connection의 트랜잭션이 곧바로 끝나야 한다.
그런데 내부 트랜잭션 커밋이라는 직접 지정해준 문자열 로그가 뜨고 나서 내부 트랜잭션 커밋과 관련된 로그가 뜨지 않았고,
외부 트랜잭션 커밋 로그가 뜨고 나서야 커밋 작업과 관련된 로그가 뜨고 있다.
어떻게 이런 로그가 나타나게 된 것일까?

로그를 보면 '내부 트랜잭션 시작' 직후에 'Participating in existing transaction' 이라는 로그가 떴다.
이는 내부 트랜잭션이 기존에 존재하는 외부 트랜잭션에 참여한다는 로그이다.
이게 왜 뜬 것일까? 정답은 isNewTransaction() 메서드 반환값에 있다.

'Participating' 로그 다음에 보면 inner.isNewTransaction()이 반환하는 값이 false라고 나와 있다.
이는 내부 트랜잭션이 외부 트랜잭션과 같은 트랜잭션에 포함되어 있다는 것을 의미한다.
즉, 외부 트랜잭션의 범위가 넓어진 것이고,
외부 트랜잭션과 내부 트랜잭션이 논리 트랜잭션으로서 하나의 물리 트랜잭션으로 묶인 것이다.

그렇기 때문에 '내부 트랜잭션 커밋' 로그 이후에 Committing ... (생략) 로그가 뜨지 않은 것이다.
내부 트랜잭션이 커밋되어도 아직 외부 트랜잭션이 커밋되지 않았으므로
DB 커넥션을 통한 물리 트랜잭션을 아직 커밋하지 않았다는 것이다.

★ 사실 스프링은 이렇게 여러 트랜잭션이 함께 사용될 경우
★ 처음 트랜잭션을 시작한 외부 트랜잭션이 실제 물리 트랜잭션을 관리하게 한다.
이를 통해 트랜잭션 중복 커밋 문제를 해결한다.



- 트랜잭션 전파 동작 흐름
1) txManager.getTransaction() 호출을 통해 외부 트랜잭션 시작(outer)

2) 외부 트랜잭션 매니저가 DataSource를 통해 Connection 생성

3) 생성한 Connection을 수동 커밋 모드로 설정 setAutoCommit(false). 트랜잭션이 실제로 시작되는 시점이다.

4) 외부 트랜잭션 매니저가 Connection을 트랜잭션 동기화 매니저에 보관한다.
   트랜잭션 동기화 매니저는 외부와 내부 구분 없이 동일한 객체이다.

5) 트랜잭션 매니저가 트랜잭션을 생성한 결과를 TransactionStatus에 담아서 반환(outer).
   바로 이 TransactionStatus에 신규 트랜잭션인지의 여부도 담겨 있다.
   신규 트랜잭션 여부는 isNewTransaction()으로 확인 가능하다(true)

6) 트랜잭션에 담긴 로직이 실행되는데, 이때 Connection이 필요한 경우
   트랜잭션 동기화 매니저를 통해 트랜잭션이 적용된 Connection을 획득해서 사용한다.

7) txManager.getTransaction() 호출을 통해 외부 트랜잭션 시작(inner)

8) 내부 트랜잭션 매니저가 트랜잭션 동기화 매니저를 통해 기존 트랜잭션이 존재하는지 확인

9) 기존 트랜잭션이 존재하므로 기존 트랜잭션에 참여한다. 
   ★기존 트랜잭션에 참여한다는 말은 트랜잭션 시작에 필요한 작업은 아무 것도 하지 않는다는 뜻이다.
   실제로, Creating new transaction ... (생략) 로그와  Acquired Connection ... (생략) 로그가 뜨지 않았다.
   이미 외부 트랜잭션에서 물리 트랜잭션을 시작했고, 물리 트랜잭션이 시작된 Connection을 트랜잭션 동기화 매니저에 담아두었다.
   그렇기 때문에 내부 트랜잭션의 로직은 트랜잭션 동기화 매니저에 보관된 기존 Connection을 그대로 사용한다.
   반납된 Connection을 받아서 재활용한다는 뜻이 아니라, 이미 수동 커밋 모드로 되어 있는 동일한 Connection을 사용한다는 뜻이다.

10) 트랜잭션 매니저는 트랜잭션을 생성한 결과를 TransactionStatus에 담아 반환하는데, (inner)
     이때는 isNewTransaction 반환값이 false이다. 즉, 신규 트랜잭션이 아니고 기존과 동일한 트랜잭션임을 의미한다.

11) 내부 트랜잭션의 로직이 실행되는데, 이때 Connection이 필요한 경우
     트랜잭션 동기화 매니저를 통해 '외부 트랜잭션'이 보관했던 그 Connection을 획득해서 사용한다.

12) 내부 트랜잭션의 로직이 끝난 후 트랜잭션 매니저를 통해 내부 트랜잭션을 커밋한다.

13) 트랜잭션 매니저는 내부 트랜잭션의 커밋 시점에 신규 트랜잭션 여부에 따라 다르게 동작한다.
     TransactionStatus의 isNewTransaction() 반환값이 true여야만 커넥션에 커밋을 호출한다.
     ★inner를 파라미터로 받은 내부 트랜잭션 매니저는 isNewTransaction() 반환값이 false이므로 Connection의 커밋을 호출하지 않는다. 

14) 남아 있는 외부 트랜잭션의 로직이 끝나고 외부 트랜잭션 매니저를 통해 커밋한다.

15) 외부 트랜잭션 매니저 역시 마찬가지로 파라미터로 받은 TransactionStatus(outer)의 isNewTransaction()의 반환값을 확인한다.
     true를 반환하므로 DB 커넥션에 실제 커밋을 호출한다.

16) 트랜잭션 매니저에 커밋하는 것은 '논리적 커밋'이라 하고, 실제 Connection에서 커밋하는 것은 '물리적 커밋'이라 한다.
     물리적 커밋을 하면 실제 DB에 커밋이 반영되고 물리 트랜잭션도 끝난다.

17) 트랜잭션이 완전히 끝난 후 Connection이 반환된다.

이와 같이, 트랜잭션 매니저에 커밋을 호출한다고 해서 항상 실제로 Connection에 물리적 커밋이 발생하는 것이 아니다.
이러한 이슈로 인해 논리 트랜잭션과 물리 트랜잭션으로 개념을 구분시킨 것이다.
TransactionStatus 객체의 isNewTransaciton() = true인 경우에만 실제 Connection을 사용하여 물리적 커밋 또는 물리적 롤백을 수행한다.



- 외부 트랜잭션에서 롤백이 발생하는 예제
내부 트랜잭션은 커밋되었는데 외부 트랜잭션에서 롤백이 일어나면 어떻게 될까?
위에서 설명했듯이, 처음 트랜잭션을 시작한 외부 트랜잭션이 실제 물리 트랜잭션을 관리하기 때문에
내부 트랜잭션에서 반영한 데이터들도 모두 함께 롤백된다.

    @Test
    void innerTransaction2() {
        log.info("외부 트랜잭션 시작");
        TransactionStatus outer = txManager.getTransaction(new DefaultTransactionAttribute());

        log.info("내부 트랜잭션 시작");
        TransactionStatus inner = txManager.getTransaction(new DefaultTransactionAttribute());

        log.info("내부 트랜잭션 커밋");
        txManager.commit(inner);

        log.info("외부 트랜잭션 롤백");
        txManager.rollback(outer);
    }

외부 트랜잭션 시작
Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
Acquired Connection [HikariProxyConnection ... (생략)
Switching JDBC Connection [HikariProxyConnection ... (중략) ... to manual commit
내부 트랜잭션 시작
Participating in existing transaction
내부 트랜잭션 커밋
외부 트랜잭션 롤백
Initiating transaction rollback
Rolling back JDBC transaction on Connection [HikariProxyConnection ... (생략)
Releasing JDBC Connection [HikariProxyConnection ... (생략)


위 케이스와 마찬가지로 '내부 트랜잭션 시작' 이후 Participating 로그가 뜨고,
내부 트랜잭션 커밋을 해도 외부 트랜잭션의 커밋 또는 롤백 전까지 아무 로그가 뜨지 않는다.
그러다가 외부 트랜잭션이 롤백되면 내부 트랜잭션과 관련된 로그는 전혀 나타나지 않고 끝난다.
이와 같이, 내부 트랜잭션이 커밋된 이후 최종 롤백 또는 커밋은 외부 트랜잭션에 완전히 위임된다.


요청 흐름 방식은 동일하니 응답 흐름만 살펴보면 다음과 같다:
1) 내부 트랜잭션 로직이 끝나고 내부 트랜잭션 매니저를 통해 내부 트랜잭션을 커밋한다.

2) 신규 트랜잭션이 아니므로 내부 트랜잭션 매니저는 실제 커밋을 호출하지 않는다. 

3) 외부 트랜잭션 로직이 끝나고 외부 트랜잭션 매니저를 통해 외부 트랜잭션을 롤백한다.

4) DB 커넥션에 실제 롤백을 호출한다. (물리 롤백)

5) 물리 트랜잭션이 끝나고 Connection 반환



- 내부 트랜잭션은 롤백하고 외부 트랜잭션은 커밋하는 경우★
위에서 "모든 논리 트랜잭션이 커밋되어야 물리 트랜잭션이 커밋된다"고 언급했듯이,
결론부터 말하자면 물리 롤백이 일어난다. 그렇다면 어떠한 과정을 통해 물리 롤백이 일어나는지 알아보자.

        log.info("내부 트랜잭션 롤백");
        txManager.rollback(inner);

        log.info("외부 트랜잭션 커밋");
        txManager.commit(outer);

일단 롤백과 커밋만 위와 같이 해놓고 테스트를 실행해보면 UnexpectedRollbackException가 발생하면서 테스트에 실패하게 된다.
org.springframework.transaction.UnexpectedRollbackException: Transaction rolled back because it has been marked as rollback-only

일단 테스트를 통과시키기 위해 아래의 코드로 수정한다.
        Assertions.assertThatThrownBy(() -> txManager.commit(outer))
                .isInstanceOf(UnexpectedRollbackException.class);

이제 테스트는 통과한다. 로그를 살펴보자:
외부 트랜잭션 시작
Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
Acquired Connection [HikariProxyConnection ... (생략)
Switching JDBC Connection [HikariProxyConnection ... (중략) ... to manual commit
내부 트랜잭션 시작
Participating in existing transaction
내부 트랜잭션 롤백
Participating transaction failed - marking existing transaction as rollback-only
Setting JDBC transaction [HikariProxyConnection ... (중략) ... rollback-only
외부 트랜잭션 커밋
Global transaction is marked as rollback-only but transactional code requested commit
Initiating transaction rollback
Rolling back JDBC transaction on Connection [HikariProxyConnection ... (생략)
Releasing JDBC Connection [HikariProxyConnection ... (생략)

로그에서 특이한 점은 'Participating transaction failed ... ' 부분이다. 
내부 트랜잭션을 롤백시킨다고 해서 실제 물리 트랜잭션이 곧바로 롤백하지 않는다.
그러나 그 대신에 기존 트랜잭션을 롤백 전용(rollback-only)으로 표시한다. 
    Participating transaction failed - marking existing transaction as rollback-only
    Setting JDBC transaction [HikariProxyConnection ... (중략) ... rollback-only
이러한 상황에서 외부 트랜잭션을 커밋한다. 그러면 아래와 같은 로그가 나타난다:
    Global transaction is marked as rollback-only but transactional code requested commit
이는 커밋을 호출했지만 전체 트랜잭션이 롤백 전용으로 표시되어 있다는 말이다.
그리하여 결국에는 Initiating transaction rollback 이라는 로그와 함께 물리 롤백을 시작한다.


응답 흐름은 다음과 같다: 
1) 내부 트랜잭션 중간에 문제가 생겨 내부 트랜잭션 매니저에서 롤백을 한다.
   이때, isNewTransaction()이 false이므로 실제 Connection에 롤백을 호출하지는 않는다.

2) 내부 트랜잭션은 물리 트랜잭션을 롤백시키지는 못하지만 그 대신 ★TransactionSynchronizationManager를 통해
   현재 쓰레드에 바인딩 된 트랜잭션 상태를 rollbackOnly = true로 설정한다.
   이렇게 트랜잭션 동기화 매니저에 rollbackOnly = true 표시를 해두면 후에 외부 트랜잭션의 트랜잭션 매니저가 이를 확인하고
   DB 커넥션에 롤백을 요청하게 된다.

3) 외부 트랜잭션의 로직이 끝나고 외부 트랜잭션 매니저를 통해 커밋을 요청한다.
   이때, 트랜잭션 동기화 매니저에 rollbackOnly = true 인지 확인하는데, 이게 true이면 물리 트랜잭션 전체를 롤백시키게 설계되어 있다.

4) 외부 트랜잭션인 outer 역시 inner와 마찬가지로 rollbackOnly가 true 이기 때문에 DB Connection에는 롤백 요청을 하게 된다.



- 참고: rollbackOnly (복잡한 내용이므로 훑어보도록 하고, 궁금할 때 다시 찾아보도록 하자)
물리 트랜잭션을 롤백시킬지 말지 결정하는 요소는 바로 rollbackOnly 속성이다.
이 rollbackOnly 속성은 TransactionStatus의 필드값으로, 아래와 같이 로그로 확인해보면 다음과 같다:
(정확히는 TransactionStatus의 조상인 TransactionExecution의 필드이긴 하다)

    * 테스트 코드: 
        log.info("외부 트랜잭션 커밋");
        log.info("outer.isRollbackOnly() = {}", outer.isRollbackOnly());
        Assertions.assertThatThrownBy(() -> txManager.commit(outer))
                .isInstanceOf(UnexpectedRollbackException.class);

    * 출력된 로그: 
    외부 트랜잭션 커밋
    outer.isRollbackOnly() = true

스프링 트랜잭션은 TransactionStatus의 rollbackOnly 필드의 값이 true로 되어 있으면 물리 트랜잭션을 롤백하도록 설계되어 있다.
참고로, log.info("inner.isRollbackOnly() = {}", inner.isRollbackOnly()); 코드의 로그 결과는
inner.isRollbackOnly() = true 이다. 사실 이는 롤백 요청을 했기 때문에 당연하다. 

그런데 왜 rollback(inner)를 했을 뿐인데 왜 outer.isRollbackOnly()까지 같이 true가 되는 걸까?
inner.isRollbackOnly() 값이 true인 것은 이해가 되는데 왜 commit(outer)를 한 outer.isRollbackOnly()까지 true인 것은 이해가 안 된다.

스프링 프레임워크에서는 트랜잭션 전파 속성을 통해 트랜잭션의 행동 방식을 제어하는데,
DefaultTransactionAttribute는 기본적으로 'Propagation.REQUIRED'를 사용한다.
이는 현재 진행 중인 트랜잭션이 있다면 해당 트랜잭션을 그대로 사용하고, 없다면 새로운 트랜잭션을 시작한다는 의미이다.
inner와 outer TransactionStatus 둘 다 동일한 전파 정책을 사용하므로 inner는 실제로 outer와 동일한 트랜잭션 컨텍스트에서 실행된다.
즉, 두 트랜잭션은 동일한 물리 트랜잭션을 공유한다.

따라서 inner 트랜잭션에서 rollback()을 호출하면, 스프링은 이 트랜잭션이 속한 전체 트랜잭션, 즉 outer를 포함한
모든 논리 트랜잭션들도 롤백되어야 한다고 판단한다. 그래서 결과적으로 outer 트랜잭션도 rollbackOnly가 true가 된다.
실제 rollbackOnly 값을 바꾸는 것은 setRollbackOnly() 메서드에 의해 이루어진다.
이 메서드는 DefaultTransactionStatus 클래스 내부에서 호출되며, 트랜잭션의 rollbackOnly 값을 변경한다.

이와 관련된 작업을 담당하는 DefaultTransactionStatus 클래스의 관련 코드 일부이다:
    public void setRollbackOnly() {
        this.rollbackOnly = true;
    }

물론 이 DefaultTransactionStatus 클래스의 setRollbackOnly() 메서드가 호출되기 전에
AbstractPlatformTransactionManager 의 내부 로직을 거쳐야 한다.

순서는 다음과 같다:
1) txManager.rollback(inner); 호출
2) AbstractPlatformTransactionManager.rollback(inner) 메서드 호출
    @Override
    public void rollback(TransactionStatus status) throws TransactionException {
        if (status.isCompleted()) {
            throw new IllegalTransactionStateException(
                "Transaction is already completed - do not call commit or rollback more than once per transaction");
        }

        DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;
        processRollback(defStatus, false);
    }

3) 위 코드에서 processRollback(inner, false); 호출
private void processRollback(DefaultTransactionStatus status, boolean unexpected) {
    try {
        boolean unexpectedRollback = unexpected || (status.isLocalRollbackOnly() && !status.isGlobalRollbackOnly());
        if (unexpectedRollback) {
            status.setGlobalRollbackOnly();
        }

        if (status.hasSavepoint()) {
            status.rollbackToHeldSavepoint();
        } else if (status.isNewTransaction()) {
            doRollback(status);
        } else if (status.hasTransaction()) {
            if (status.isLocalRollbackOnly()) {
                doSetRollbackOnly(status);
            }
        }
    } catch (RuntimeException | Error ex) {
        triggerAfterCompletion(status, TransactionSynchronization.STATUS_UNKNOWN);
        throw ex;
    }
}
processRollback 메서드는 트랜잭션 롤백을 처리하는 주요 로직이다.
이 메서드는 여러 단계를 거쳐 rollbackOnly 상태를 설정한다.
위 메서드 로직에서 중요한 부분은 status.setGlobalRollbackOnly() 호출 부분이다. 
status.setGlobalRollbackOnly() 메서드는 트랜잭션 rollbackOnly 상태를 설정한다.

4) status.setGlobalRollbackOnly() 호출
이 메서드는 DefaultTransactionStatus 클래스의 메서드로, 현재 트랜잭션의 rollbackOnly 상태를 true로 변경한다.
    public void setGlobalRollbackOnly() {
        this.globalRollbackOnly = true;
        if (this.transaction != null) {
            this.transaction.setRollbackOnly();
        }
    }
이 메서드는 내부적으로 this.transaction.setRollbackOnly()를 호출하여, 트랜잭션 객체 자체의 상태를 rollbackOnly로 변경한다.

5) this.transaction.setRollbackOnly() 호출
이 메서드는 AbstractPlatformTransactionManager의 구현 클래스에 의해 구현되며, 트랜잭션의 rollbackOnly 상태를 설정한다.
    public void setRollbackOnly() throws IllegalTransactionStateException {
        this.rollbackOnly = true;
    }
inner 트랜잭션과 outer 트랜잭션이 동일한 트랜잭션 컨텍스트를 공유하기 때문에 이 코드에 의해
outer.rollbackOnly가 true가 된다.



- UnexpectedRollbackException
outer 트랜잭션의 rollbackOnly가 true인데 txManager.commit(outer)을 시도하게 되면
스프링은 UnexpectedRollbackException 발생시킨다. 이는 예상치 못한 롤백이 발생했음를 나타내는 예외이다.

애플리케이션 개발에서 중요한 기본 원칙은 모호함을 제거하는 것이다. 개발은 명확해야 한다.
이렇게 커밋을 호출했는데, 내부에서 롤백이 발생한 경우 모호하게 두면 아주 심각한 문제가 발생한다.
이렇게 기대한 결과가 다른 경우 예외를 발생시켜서 명확하게 문제를 알려주는 것이 좋은 설계이다.



- REQUIRES_NEW 전파 방식
지금까지는 REQUIRED 전파 방식 기준으로 설명한 내용들이었다.
만약 외부 트랜잭션과 내부 트랜잭션을 완전히 분리해서 각각 별도의 물리 트랜잭션으로 갈라지게 하고 싶다면
REQUIRES_NEW 전파 방식을 사용하면 된다. 이 방식을 사용하면 외부 트랜잭션과 내부 트랜잭션의 커밋과 롤백도 별도로 이루어진다.
별도의 물리 트랜잭션을 가진다는 뜻은 DB Connection이 아예 서로 다르다는 뜻이다.

    @Test
    void innerTransaction4() {
        log.info("외부 트랜잭션 시작");
        TransactionStatus outer = txManager.getTransaction(new DefaultTransactionAttribute());
        log.info("outer.isNewTransaction() = {}", outer.isNewTransaction());

        log.info("내부 트랜잭션 시작");
        ★ DefaultTransactionAttribute definition = new DefaultTransactionAttribute();
        ★ definition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);

        TransactionStatus inner = txManager.getTransaction(★definition);
        log.info("inner.isNewTransaction() = {}", inner.isNewTransaction());

        log.info("내부 트랜잭션 롤백");
        txManager.rollback(inner);

        log.info("외부 트랜잭션 커밋");
        txManager.commit(outer);
    }


이번에는 트랜잭션 전파 방식을 다르게 적용하기 위해
트랜잭션 전파 방식을 설정하는 DefaultTransactionAttribute 객체를 새로 만들고,
그 객체를 inner의 txManager.getTransaction()의 파라미터로 넣었다.
    DefaultTransactionAttribute definition = new DefaultTransactionAttribute();
    definition.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);

    TransactionStatus inner = txManager.getTransaction(definition);


로그를 확인하면 아래와 같다: 
외부 트랜잭션 시작
Creating new transaction with name [null]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT
Acquired Connection [HikariProxyConnection ... (생략)
Switching JDBC Connection [HikariProxyConnection ... (중략) ... to manual commit
outer.isNewTransaction() = true
내부 트랜잭션 시작
Suspending current transaction, creating new transaction with name [null]
Acquired Connection [HikariProxyConnection@1711229836 wrapping conn1: url= ... (생략)
Switching JDBC Connection [HikariProxyConnection ... (중략) ... to manual commit
inner.isNewTransaction() = true
내부 트랜잭션 롤백
Initiating transaction rollback
Rolling back JDBC transaction on Connection [HikariProxyConnection ... (생략)
Releasing JDBC Connection [HikariProxyConnection@1711229836 wrapping conn1: url= ... (생략)
Resuming suspended transaction after completion of inner transaction
외부 트랜잭션 커밋
Initiating transaction commit
Committing JDBC transaction on Connection [HikariProxyConnection ... (생략)
Releasing JDBC Connection [HikariProxyConnection ... (생략)


눈여겨 볼 점은 내부 트랜잭션을 시작하면서 conn1을 획득하고, 내부 트랜잭션을 롤백할 때 역시 conn1을 Release한다는 것이다.
이는 내부 트랜잭션이 외부 트랜잭션에 참여하는 것이 아니라 새로운 신규 트랜잭션을 사용하기 때문이다.
그렇기 때문에 '내부 트랜잭션 시작' 로그 다음에 Participating 로그가 없고 Suspending 로그가 뜨는 것이다.
그리고 inner.isNewTransaction() = true 로그도 볼 수 있다.

한편, 외부 트랜잭션 커밋 역시 앞서 다루었던 사례들처럼 커밋을 시도하고 있다.
이는 내부 트랜잭션의 전파 옵션이 REQUIRES_NEW 이기 때문에,
내부 트랜잭션과 외부 트랜잭션은 별개의 물리 트랜잭션이 되었기 때문이다.
그래서 내부 트랜잭션이 롤백되어도 외부 트랜잭션에 영향을 주지 않기 때문에 예외가 발생하지 않고 그대로 커밋을 진행하는 것이다.


테스트 코드의 흐름을 살펴보자:
1) txManager.getTransaction() 이 호출되어 외부 트랜잭션이 시작된다.

2) 외부 트랜잭션 매니저는 DataSource를 통해 Connection을 생성한다.

3) 생성한 Connection을 수동 커밋 모드로 설정한다: setAutoCommit(false)
   이는 물리 트랜잭션을 시작하게 한다.

4) 외부 트랜잭션 매니저는 트랜잭션 동기화 매니저에 Connection(conn0)을 보관한다. 

5) 외부 트랜잭션 매니저는 트랜잭션을 생성한 결과를 TransactionStatus에 담아서 반환하는데, 
   이 TransactionStatus에 신규 트랜잭션 여부가 담겨있어 isNewTransaction() 메서드로 확인할 수 있다. (true)

6) 외부 트랜잭션에 담긴 로직이 실행되는데, 이때 Connection이 필요한 경우
   트랜잭션 동기화 매니저를 통해 트랜잭션이 적용된 Connection을 획득해서 사용한다.

7) REQUIRES_NEW 옵션과 함께 txManager.getTransaction() 을 호출하여 내부 트랜잭션을 시작한다.
   이때, 내부 트랜잭션 매니저는 REQUIRES_NEW 옵션을 확인하고, 기존 트랜잭션에 참여하지 않고 새로운 트랜잭션을 시작한다.

9) 내부 트랜잭션 매니저는 DataSource를 통해 Connection을 생성한다.
   마찬가지로 생성한 Connection을 수동 커밋 모드로 설정하여 물리 트랜잭션을 시작하게 한다.

10) 내부 트랜잭션 매니저가 트랜잭션 동기화 매니저에 9)에서 생성된 Connection(conn1)을 보관한다.

11) 내부 트랜잭션 매니저는 트랜잭션을 생성한 결과를 TransactionStatus에 담아서 반환하는데, 
    이번에는 내부 트랜잭션의 isNewTransaction() 메서드 반환 값도 true이다.

12) 내부 트랜잭션에 담긴 로직이 실행되는데, 이때 Connection이 필요한 경우
   트랜잭션 동기화 매니저를 통해 트랜잭션이 적용된 Connection을 획득해서 사용한다.

13) 내부 트랜잭션 로직에 문제가 생겨 내부 트랜잭션 매니저를 통해 내부 트랜잭션을 롤백한다.
     이때, REQUIRED 전파 옵션 때와는 달리 outer의 rollbackOnly를 true로 바꾸지 않는다. 

14) 현재 내부 트랜잭션의 isNewTransaction() 값이 true 이기 때문에 DB Connection에 실제 롤백 요청을 한다.

15) 롤백이 완전히 끝나면 conn1을 해제한다.

16) 외부 트랜잭션에서 커밋 요청을 한다.

17) 외부 트랜잭션 역시 마찬가지로  isNewTransaction() 값이 true 이고, 
     또 rollbackOnly 값이 true로 변경된 내역이 없으므로 DB Connection에 실제 커밋 요청을 한다.

18) 커밋이 완전히 끝나면 conn0을 해제한다. 

* 참고로, 예제에서는 외부는 커밋, 내부는 롤백시켰지만 REQUIRES_NEW 전파 옵션에서는
외부 트랜잭션과 내부 트랜잭션은 물리 트랜잭션 자체가 아예 별개이기 때문에
내부 트랜잭션이 커밋되고 외부 트랜잭션이 롤백되더라도 서로 영향을 주지 않는다.
그러므로 외부롤백/내부커밋 예제는 생략하고 설명으로 대신하도록 하겠다.

* 참고로, 내부 트랜잭션보다 외부 트랜잭션을 먼저 롤백 또는 커밋시켜버리면
TransactionSynchronizationManager는 현재 쓰레드에 바인딩된 데이터베이스 연결을 찾지 못하게 되어,
No value for key [...] bound to thread 오류 메시지와 함께 IllegalStateException이 발생한다.
그러므로 아무리 물리 트랜잭션이 분리되었다고 해도 외부 트랜잭션을 내부 트랜잭션보다 먼저 롤백/커밋하면 안 된다.

* 참고
PROPAGATION_REQUIRES_NEW 전파 옵션을 사용할 때, 트랜잭션이 너무 자주 생성되거나
불필요하게 중첩된 트랜잭션이 남발되면, 커넥션 풀도 빨리 소진되고, DB에 부하를 줄 수 있다.
이러한 상황은 특히 트래픽이 많은 서비스에서 심각한 성능 저하나 시스템 장애를 초래할 수 있다.
모든 작업이 실패하지 않아야 할 필요가 있는 경우가 아니라면 굳이 REQUIRES_NEW를 사용할 필요가 없다.
그렇기 때문에 아주 가끔만 사용되는 것이다.



- 그 외 내부 트랜잭션의 전파옵션들
지금까지는 가장 많이 사용되는 REQUIRED 전파 옵션과, 아주 가끔 사용되는 REQUIRES_NEW 전파 옵션에 대해 알아 보았다.
이 외에도 다른 전파옵션들도 있는데, 거의 사용되지는 않지만 이런 게 있다 정도로 알아두도록 하자:

PROPAGATION_REQUIRED
    실무에서 가장 많이 사용하는 설정이자, 기본값이다. 기존 트랜잭션이 없으면 생성하고, 있으면 참여한다.

PROPAGATION_REQUIRES_NEW
    항상 새로운 트랜잭션을 생성한다.

PROPAGATION_SUPPOORT
    기존 트랜잭션이 없으면 없는대로 진행하고, 있으면 참여한다.

PROPAGATION_NOT_SUPPOORT
    트랜잭션 없이 진행한다.

PROPAGATION_MANDATORY
    기존 트랜잭션에 반드시 참여해야 한다. 기존 트랜잭션이 없을 경우 IllegalTransactionStateException 예외 발생.

PROPAGATION_NEVER
    트랜잭션 없이 진행한다. 심지어 기존 트랜잭션이 있을 경우,
    기존 트랜잭션이 있다는 이유로 IllegalTransactionStateException 예외가 발생한다.

PROPAGATION_NESTED
    기존 트랜잭션이 없으면 생성하고, 있으면 중첩 트랜잭션을 만든다.
    중첩 트랜잭션은 REQUIRED 때와는 달리 내부에서 롤백이 되어도 외부 트랜잭션 커밋이 가능하다.
    단, 외부 트랜잭션이 롤백되면 중첩 트랜잭션도 롤백된다.
    이 옵션은 JPA에서는 사용 불가하다.


* 참고
isolation, timeout, readOnly 속성은 신규 트랜잭션에만 적용된다. 즉, isNewTransaciton() = true인 경우에만 적용된다. 

