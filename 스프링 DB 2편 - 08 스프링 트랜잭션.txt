- 스프링의 트랜잭션 추상화
각각의 데이터 접근 기술들은 트랜잭션을 처리하는 방식에 차이가 있다.
예를 들어 JDBC 기술과 JPA 기술은 트랜잭션을 사용하는 코드 자체가 서로 다르다.

* JDBC의 트랜잭션 코드
    public void accountTransfer(String fromId, String toId, int money) throws SQLException {
        Connection con = dataSource.getConnection();
        try {
            con.setAutoCommit(false); //트랜잭션 시작
            //비즈니스 로직
            bizLogic(con, fromId, toId, money);
            con.commit(); //성공시 커밋
        } catch (Exception e) {
            con.rollback(); //실패시 롤백
            throw new IllegalStateException(e);
        } finally {
            release(con);
        }
    }


* JPA의 트랜잭션 코드
    public static void main(String[] args) {
        //엔티티 매니저 팩토리 생성
        EntityManagerFactory emf =Persistence.createEntityManagerFactory("jpabook");
        EntityManager em = emf.createEntityManager(); //엔티티 매니저 생성
        EntityTransaction tx = em.getTransaction(); //트랜잭션 기능 획득

        try {
            tx.begin(); //트랜잭션 시작
            logic(em); //비즈니스 로직
            tx.commit();//트랜잭션 커밋
        } catch (Exception e) {
            tx.rollback(); //트랜잭션 롤백
        } finally {
            em.close(); //엔티티 매니저 종료
        }
        emf.close(); //엔티티 매니저 팩토리 종료
    }

목적은 같지만 이렇게 사용하는 클래스들부터 다르기 때문에 어찌됐든 JDBC 기술을 사용하다 JPA로 변경하게 되면
트랜잭션을 위한 코드들도 모두 변경해야 한다.

스프링은 이러한 문제를 해결하기 위해 예외 추상화에서도 그러했듯이 트랜잭션 추상화도 제공한다.
이러한 추상화를 제공하는 클래스가 바로 PlatformTransactionManager라는 인터페이스이다.



- PlatformTransactionManager 인터페이스
이 인터페이스는 딱 세 가지 기능을 위한 메서드들만 선언되어 있다:

    트랜잭션 시작 메서드: getTransaction()
    커밋 메서드: commit()
    롤백 메서드: rollback()

    package org.springframework.transaction;

    public interface PlatformTransactionManager extends TransactionManager {
        TransactionStatus getTransaction(@Nullable TransactionDefinition definition) throws TransactionException;
        void commit(TransactionStatus status) throws TransactionException;
        void rollback(TransactionStatus status) throws TransactionException;
    }

PlatformTransactionManager를 구현한 구현체들은 어떤 DB 접근 기술을 사용하냐에 따라 달라진다:
    JDBC:		DataSourceTransactionManager
    JPA: 		JpaTransactionManager
    Hibernate:	HibernateTransactionManager
    그 외		~TransactionManager

그러므로 비즈니스 로직을 담당하는 @Service 클래스들은 그냥 이 PlatformTransactionManager에 의존하면 된다.
스프링은 위에 있는 구현체들 역시도 제공하기 때문에 개발자들은 구현체를 만들 필요도 없고 그냥 스프링 빈으로 주입 받아서 사용하면 된다.

심지어, 스프링 부트의 경우에는 더 나아가서 어떤 데이터 접근 기술을 사용하는지 자동으로 인식해서 
적절한 트랜잭션 매니저를 선택해서 스프링 빈으로 등록해주기 때문에 트랜잭션 매니저를 선택하고 등록하는 과정마저 생략된다.

예를 들어 JdbcTemplate과 MyBatis를 사용할 경우 DataSourceTransactionManager를 자동으로 스프링 빈으로 등록하고,
JPA를 사용하면 JpaTransactionManager를 스프링 빈으로 등록한다.
참고로, 스프링 5.3부터는 DataSourceTransactionManager 대신에 기능이 약간 추가된 JdbcTransactionManager를 제공한다.



- 스프링 트랜잭션에 대한 기초적인 내용은 Spring DB 1의 두 번째 메모장 파일에 자세히 나와 있으므로 참고하도록 하자.



- 트랜잭션 적용 확인하기
@Transactional을 통해 트랜잭션을 적용하면 트랜잭션 관련 코드는 없고 AOP를 기반으로 동작하기 때문에
실제 트랜잭션이 적용되고 있는지 확인하고 싶을 수 있다.

실제 트랜잭션이 적용되고 있는지 확인하기 위해서 TxApplyBasicTest 라는 테스트 클래스를 만들어 본다.

@Slf4j
@SpringBootTest
public class TxBasicTest {

    @Autowired BasicService basicService;

    @Test
    void proxyCheck() {
        log.info("aop class = {}", basicService.getClass());
        Assertions.assertThat(AopUtils.isAopProxy(basicService)).isTrue();
    }

    @Test
    void txTest() {
        basicService.tx();
        basicService.nonTx();
    }

    @TestConfiguration
    static class TxApplyBasicConfig {
        @Bean
        BasicService basicService() {
            return new BasicService();
        }
    }

    static class BasicService {
        @Transactional
        public void tx() {
            log.info("call tx");
            boolean txActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("tx active = {}", txActive);
        }

        public void nonTx() {
            log.info("call nonTx");
            boolean txActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("tx active = {}", txActive);
        }
    }
}


출력결과:
aop class = class springtx.apply.TxBasicTest$BasicService$$EnhancerBySpringCGLIB$$c2159ee5
call tx
tx active = true (트랜잭션이 실행되고 있다는 뜻)
call nonTx
tx active = false (트랜잭션이 실행되고 있지 않다는 뜻)


AopUtils.isAopProxy()` : 선언적 트랜잭션 방식에서 스프링 트랜잭션은 AOP를 기반으로 동작한다
@Transactional을 메서드나 클래스에 붙이면 해당 객체는 트랜잭션 AOP 적용의 대상이 되고, 결과적으로
실제 객체 대신에 트랜잭션을 처리해주는 프록시 객체가 스프링 빈에 등록된다. 
그리고 주입을 받을 때도 실제 객체 대신에 프록시 객체가 주입된다.

BasicService$$EnhancerBySpringCGLIB$$c2159ee5라는 클래스는 테스트가 실행될 때 동적으로 생성된 프록시 클래스이며,
BasicService의 자손이다. `@Transactional` 애노테이션이 특정 클래스나 메서드에 하나라도 있으면 트랜잭션 AOP는 프록시를 만들어서
스프링 컨테이너에 등록한다. 그리고 실제 `basicService` 객체 대신에 프록시인 basicService$$CGLIB를 스프링 빈에 등록한다.
실제 객체인 basicService가 스프링 컨테이너에 등록된 것이 아니라는 점이 핵심이다.

그런데 TxBasicTest 클래스에서 @Autowired BasicService basicService; 라고 선언하지 않았는가?
그렇다 해도 스프링 컨테이너는 실제 BasicService 대신에 basicService$$CGLIB를 TxBasicTest 클래스에 주입한다.
어차피 basicService$$CGLIB는 찐 BasicService를 참조하며, 상속 받았기 때문에
다형성으로 인해 BasicService로 인식하여 타입 문제도 없다.

logging.level.org.springframework.transaction.interceptor=TRACE

이 로그를 추가하면 트랜잭션 프록시가 호출하는 트랜잭션의 시작과 종료를 로그로 확인할 수 있다.

출력결과: 
Getting transaction for [springtx.apply.TxBasicTest$BasicService.tx]	// 트랜잭션 획득
call tx
tx active = true
Completing transaction for [springtx.apply.TxBasicTest$BasicService.tx]	// 트랜잭션 종료
call nonTx
tx active = false

참고로, nonTx() 메서드를 호출하더라도 이 메서드를 호출하는 클래스도 프록시 클래스다. 
하지만 nonTx() 메서드에는 @Transactional 어노테이션을 걸어주지 않았기 때문에
트랜잭션 관련 로직을 수행하지 않고 그대로 BasicService에 호출을 위임한다.

TransactionSynchronizationManager.isActualTransactionActive();
이 코드는 현재 쓰레드에 트랜잭션이 적용되어 있는지 확인할 수 있는 코드이다.
현재 쓰레드에서 트랜잭션이 적용되어 있으면 true, 트랜잭션이 적용되어 있지 않으면 false를 반환한다.



- 트랜잭션 적용 위치와 readOnly 속성
스프링에서 우선순위는 항상 더 구체적이고 자세한 것이 높은 우선 순위를 가지도록 설계되어 있다. (실습은 TxLevelTest.java 참고)
예를 들어, 클래스 앞에는 @Transactional(readOnly = true) 라고 해 놓았는데,
클래스 내부에 있는 메서드 앞에 @Transactional(readOnly = false) 라고 해 놓으면 그 메서드에 대해서는 false가 적용된다는 것이다.
그리고 잘 사용하지는 않지만 인터페이스에도 @Transactional과 별도의 속성을 적용시킬 수 있다.
인터페이스에 @Transactional을 걸어주었을 때도 인터페이스보다는 구현체에 적용된 @Transactional 설정이 더 우선적으로 적용된다.
다만, 인터페이스에 @Transactional을 걸어주는 것은 권장되지 않으므로 가급적 구현체에 걸어주도록 하자.

참고로, 현재 쓰레드의 트랜잭션이 readOnly인지 아닌지 확인하려면
TransactionSynchronizationManager.isCurrentTransactionReadOnly(); 메서드를 이용하면 된다.

참고로, readOnly=false가 기본값이다. 즉, 기본적으로 쓰기가 가능하도록 설정되어 있다.
테스트 코드에서 클래스 전체에 @Transactional(readOnly = true)를 달았고,
write 메서드에만 @Transactional(readOnly = false)를 달아주었다. 그 결과를 보자.

실습 코드의 출력 결과: 
    Getting transaction for [springtx.apply.TxLevelTest$LevelService.write]
    call write
    tx active=true
    tx readOnly=false
    Completing transaction for [springtx.apply.TxLevelTest$LevelService.write]
    Getting transaction for [springtx.apply.TxLevelTest$LevelService.read]
    call read
    tx active=true
    tx readOnly=true
    Completing transaction for [springtx.apply.TxLevelTest$LevelService.read]

write 메서드에만 readOnly=false가 출력되고, read 메서드에는 readOnly=true가 출력된 것을 볼 수 있다.



- 프록시 내부 호출
@Transactional을 사용하면 스프링 트랜잭션 AOP가 적용된다. 트랜잭션 AOP는 기본적으로 프록시 방식의 AOP를 사용한다.
앞서 언급했듯이 @Transactional을 달아주면 프록시 객체가 요청을 먼저 받아 트랜잭션을 시작하고,
비즈니스 로직은 실제 객체를 호출하게 된다. 따라서 스프링 트랜잭션을 이용한다는 것은 항상 프록시를 통해 대상 객체를 호출한다는 것이다.

스프링 트랜잭션 AOP를 적용하면 스프링이 대상 객체를 컨테이너에 빈으로 등록하는 것이 아니라, 
프록시 객체를 스프링 빈으로 등록하게 된다.
따라서 일반적인 상황에서 스프링은 의존관계 주입 시 항상 실제 객체 대신 프록시 객체를 주입한다.
프록시 객체가 주입되기 때문에 프록시가 아닌 진짜 찐 대상 객체를 직접적으로 호출하는 일은 일반적으로 발생하지 않는다.

하지만 찐 대상 객체 메서드에서 다른 내부 메서드 호출이 발생하면 프록시를 거치지 않고 대상 객체를 직접 호출하는 문제가 발생한다.
그렇게 되면 트랜잭션이 적용되지 않아서 commit 이나 rollback이 정상적으로 이루어지지 않는 문제가 터진다. 

예제를 살펴보자: InternalCallV1Test

@SpringBootTest
@Slf4j
public class InternalCallV1Test {
    @Autowired
    CallService callService;

    @Test
    void printProxy() {
        log.info("call Service class = {}", callService.getClass());
    }

    @Test
    void internalCall() {
        callService.internal();
    }

    @Test
    void externalCall() {
        callService.external();
    }


    @TestConfiguration
    static class InternalCallV1Config {
        @Bean
        CallService callService() {
            return new CallService();
        }
    }


    static class CallService {
        public void external() {
            log.info("call external");
            printTxInfo();
            internal(); // external 메서드에서 CallService 의 내부 메서드인 internal 메서드를 호출
        }

        @Transactional
        public void internal() {
            log.info("call internal");
            printTxInfo();
        }

        private void printTxInfo() {
            boolean txActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("tx active = {}", txActive);
        }
    }
}

테스트 출력 로그:
call Service class = class springtx.apply.InternalCallV1Test$CallService$$EnhancerBySpringCGLIB$$89136b94

Getting transaction for [springtx.apply.InternalCallV1Test$CallService.internal]
call internal
tx active = true
Completing transaction for [springtx.apply.InternalCallV1Test$CallService.internal]

    * 정상적으로 트랜잭션이 적용되는 예시
    1) callService.internal() 메서드가 호출되면 프록시가 호출된다.
       internal() 메서드에 @Transactional이 붙어 있으므로 트랜잭션 프록시는 트랜잭션을 적용시킨다.
    2) 트랜잭션이 시작된 후 찐 callService 객체 인스턴스의 internal() 메서드가 호출된다.
    3) 찐 internal() 메서드가 완료된 후 응답이 트랜잭션 프록시로 전달되고, 트랜잭션 프록시는 트랜잭션을 완료한다.

call external
tx active = false
call internal
tx active = false

어? 그래도 internal() 메서드에 @Transactional 이 달려 있는데? 왜 트랜잭션이 적용되지 않았지? 의문이 생긴다.
@Transactional 이 달리지 않은 external() 메서드 내부에서 internal() 메서드를 호출하면 트랜잭션이 왜 적용되지 않을까?
이유는 아래와 같다: 

    1) 처음에 클라이언트가 callService.external() 메서드를 호출하면 프록시 서비스 객체가 호출된다.
       프록시 서비스 객체는 external() 메서드에 @Transacitonal이 없으므로 트랜잭션을 적용시키지 않는다.
    2) 트랜잭션이 시작되지 않은 상태에서 찐 callService 객체 인스턴스의 external() 메서드가 호출되고, 
       로직을 따라 internal() 메서드도 호출된다. 여기서 internal() 메서드는 사실 this.internal()에서 this가 생략된 것이다.
       이건 스프링이 아닌 자바 언어 자체가 가진 특징이다.
       그렇기 때문에 이러한 내부 호출은 아무리 @Transactional이 달려 있다 한들 프록시 객체를 거쳐서 호출되지 않기 때문에 
       트랜잭션을 시작하지 못하게 되는 것이다.
       ★ @Transactional 어노테이션은 프록시 객체를 거쳐서 대상 객체를 호출할 수 있게 돕는 역할일 뿐,
       ★ @Transactional 어노테이션이 달려 있다고 무조건 트랜잭션이 적용된다고 착각해서는 안 된다.
       ★ 다시 한 번 강조하면, 프록시 객체를 중간에 거쳐야만 트랜잭션을 적용시킬 수 있다는 것을 기억하자.

이게 바로 스프링 트랜잭션 AOP의 한계점이라고 할 수 있다.
@Transactional 어노테이션이 있어도 트랜잭션용 프록시 객체를 거쳐가지 않으면 트랜잭션을 시작하지 못한다는 것을 꼭 기억하자...

이제 문제의 원인은 알았다. 하지만 원인만 알면 안 된다. 해결도 같이 알아야 한다.
internal 메서드에 트랜잭션을 적용시키려면 어떻게 해야 할까?
실무에서 자주 사용되는 방법은 트랜잭션이 적용되어야 하는 메서드를 별도의 클래스에 분리시켜버리는 것이다.
그렇게 하면 this.internal()이 아닌 그 클래스의 instance.internal()이 되니까 프록시를 거칠 수 있게 된다.



- 트랜잭션 적용할 메서드를 다른 클래스로 분리시키기: InternalCallV2Test
    @TestConfiguration
    static class InternalCallV2Config {

        @Bean
        CallService callService() {
            return new CallService(internalService());
        }

        @Bean
        InternalService internalService() {
            return new InternalService();
        }
    }


    @RequiredArgsConstructor
    static class CallService {

        private final InternalService internalService;

        public void external() {
            log.info("call external");
            printTxInfo();
            internalService.internal(); // external 메서드에서 CallService 의 내부 메서드인 internal 메서드를 호출
        }

        private void printTxInfo() {
            boolean txActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("tx active = {}", txActive);
        }
    }


    static class InternalService {
        @Transactional
        public void internal() {
            log.info("call internal");
            printTxInfo();
        }

        private void printTxInfo() {
            boolean txActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("tx active = {}", txActive);
        }
    }

이제 더이상 internal() 메서드가 내부호출이 아니라, 외부호출이 되기 때문에 InternalService의 프록시 객체를 거칠 수 있게 되고,
그렇기 때문에 internal() 메서드에 트랜잭션을 적용시킬 수 있게 된다.

    1) 클라이언트가 callService.external()을 호출한다. 이때 callService는 프록시가 아닌 찐 CallService의 인스턴스이다.
    2) callService가 주입 받은 internalService의 internal() 메서드를 호출한다. 이때 InternalService는 프록시 인스턴스이다.
    3) 프록시 InternalService 객체를 거치기 때문에 트랜잭션이 시작된 상태에서 internalService의 internal() 메서드가 호출되고 로직이 실행된다.

이 방법 외에도 다른 방법도 있으나 실무에서는 주로 이렇게 별도로 클래스를 분리시키는 방법을 사용한다.



- 스프링부트 3.0 부터는 private 제외 모든 접근제어자에 트랜잭션 적용가능
스프링부트 2.xxx 때는 public에만 트랜잭션이 적용되는 것이 기본 설정이었다.



- 트랜잭션 AOP 주의사항: 스프링 초기화 시점
스프링이 초기화되고 있는 시점에는 트랜잭션 AOP가 적용되지 않을 수가 있다.

@SpringBootTest
@Slf4j
public class InitTxTest {

    static class Hello {

        @PostConstruct
        @Transactional
        public void initV1() {
            boolean isActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("Hello init @PostConstruct tx active = {}", isActive);
        }

        @EventListener(value = ApplicationReadyEvent.class)
        @Transactional
        public void initV2() {
            boolean isActive = TransactionSynchronizationManager.isActualTransactionActive();
            log.info("Hello init ApplicationReadyEvent tx active = {}", isActive);
        }
    }

    @TestConfiguration
    static class InitTxTestConfig {
        @Bean
        Hello hello() {
            return new Hello();
        }
    }

    @Autowired Hello hello;

    @Test
    void noCall() {
        // @PostConstruct 어노테이션에 의해 초기화 코드는 스프링이 초기화되는 시점에 호출됨
    }

    @Test
    void call() {
        // noCall 메서드 테스트의 대조군. hello 빈으로 직접 호출한다.
        hello.initV1();
    }
}

출력 결과: 
    Initialized JPA EntityManagerFactory for persistence unit 'default'
    Hello init @PostConstruct tx active = false
    Started InitTxTest in 2.337 seconds (JVM running for 3.261)
    Getting transaction for [springtx.apply.InitTxTest$Hello.initV2]
    Hello init ApplicationReadyEvent tx active = true
    Completing transaction for [springtx.apply.InitTxTest$Hello.initV2]
    Getting transaction for [springtx.apply.InitTxTest$Hello.initV1]
    Hello init @PostConstruct tx active = true
    Completing transaction for [springtx.apply.InitTxTest$Hello.initV1]
    Closing JPA EntityManagerFactory for persistence unit 'default'

* Hello init @PostConstruct tx active = false
    @PostConstruct 어노테이션이 붙은 initV1() 메서드가 호출될 때 출력된 메시지이다. 
    @PostConstruct 어노테이션이 붙은 메서드는 스프링 빈이 생성되고 의존성이 주입이 완료가 된 후애 호출된다. 
    이 메서드는 기본적으로 트랜잭션 컨텍스트가 없는 상태에서 실행된다.
    스프링 빈 초기화 과정에서 @PostConstruct가 적용된 메서드는 의존성 주입이 완료된 직후에 바로 실행되기 때문에
    @Transactional이 있다고 해도 이 시점에서는 트랜잭션 관리 로직이 끼어 들어갈 틈이 없어 트랜잭션이 적용될 수 없다. 
    그렇기 때문에 값이 false가 나온 것이다.

* Started InitTxTest in 2.337 seconds (JVM running for 3.261)
    Spring Boot 애플리케이션이 모든 초기화 작업을 완료하고 준비된 상태로 진입했음을 나타낸다.
    @PostConstruct 메서드 호출 후, 모든 빈 초기화와 컨텍스트 설정이 완료되었음을 의미한다.

* Getting ~ initV2 ~ active = true ~ Completing ~ initV2
    ApplicationReadyEvent 이벤트 리스너로 등록된 initV2() 메서드에서 출력된 메시지로, 트랜잭션이 활성화 되었음을 의미한다.
    @EventListener(ApplicationReadyEvent.class) 어노테이션은 Spring 애플리케이션 컨텍스트가 완전히 초기화되고 준비된 후에 호출된다. 
    즉, 스프링 컨테이너가 완전히 준비가 된 후에 호출하게 하는 어노테이션이다. 
    그러므로 이 시점에는 이미 트랜잭션 관리가 적용될 수 있는 상태이므로, @Transactional이 제대로 동작한다.

이상 noCall() 테스트 메서드로 인해 생기는 로그였다. 정확히 말하자면 테스트 메서드 로직에서 출력되는 로그가 아닌,
테스트를 Run 해서 스프링 컨테이너를 구성시키고 @PostConstruct 메서드를 실행한 코드라고 보면 된다.

지금부터는 call() 테스트 메서드로 인해 생기는 로그이다.
* Getting ~ initV1 ~ active = true ~ Completing ~ initV1
    이미 hello 빈의 초기화가 완료가 된 상태에서 호출할 수밖에 없기 때문에 트랜잭션 관리가 적용될 수 있는 상태임을 알 수 있다.


정리하면, @PostConstruct로 초기화된 initV1() 메서드는 트랜잭션이 활성화되지 않은 상태에서 실행되었지만,
ApplicationReadyEvent 이벤트가 발생한 후 호출된 initV2() 메서드는 트랜잭션이 활성화된 상태에서 실행되었다. 
별도로, call() 테스트 메서드는 단지 대조용으로 추가된 것이므로 참고하도록 하자.

추가적으로, 초기화 작업을 트랜잭션 안에서 수행하고 싶을 때는
@EventListener(value = ApplicationReadyEvent.class)를 활용하는 것이 좋다.



- @Transactional 속성 소개

* value, transactionManager
    코드로 직접 트랜잭션을 사용하는 예제에서 살펴보았듯이, 트랜잭션을 사용하려면 사실 스프링 빈에 등록된 트랜잭션 매니저가 필요하다. 
    @Transactional 어노테이션 역시 마찬가지로 트랜잭션 프록시 객체가 사용할 트랜잭션 매니저가 필요하다.
    이 속성은 자주 생략되곤 하는데, 생략될 경우 기본으로 등록된 트랜잭션 매니저가 사용된다.
    그러나 스프링 빈에 등록된 트랜잭션 매니저가 두 가지 이상일 경우에는 트랜잭션 매니저의 이름을 지정해서 적용해주어야 한다.

    @Transactional("memberTxManager")
    @Transactional("orderTxManger")
    (어노테이션 속성이 하나일 경우 위와 같이 'value = ' 부분을 생략. value 속성이 아닐 경우 불가. Java 문법)


* rollbackFor
    예외 발생 시 스프링 트랜잭션의 기본 정책은 다음과 같다: 
        언체크 예외: RuntimeException, Error와 그 하위 예외가 발생하면 롤백
        체크 예외: Exception과 그 하위 예외들은 커밋

    rollbackFor 속성을 사용하면 위의 기본 정책에 추가로 어떤 예외가 발생할 때 롤백할지 지정할 수 있다:
    @Transactional(rollbackFor = Exception.class)
    예를 들어 위와 같이 지정하면 체크 예외인 Exception 및 그 하위 예외들이 발생했을 때 롤백하게 된다. 
    이 속성은 은근히 많이 사용된다.

    rollbackForClassName = Exception
    rollbackFor = Exception.class
    이 둘은 같은 말인데 전자는 잘 사용되지 않는다.


* noRollbackFor
    지정한 예외가 발생해도 무시하고 커밋하도록 설정하는 속성이다. 마찬가지로 잘 사용되지는 않지만 ~ForClassName 속성도 있다. 


* propagation
    트랜잭션 전파에 대한 옵션으로, 후에 더 자세히 언급될 예정이다.


* isolation
    트랜잭션 격리 수준을 지정할 수 있는 속성이다. 기본값은 DB에서 설정된 격리 수준을 그대로 사용하는 'DEFAULT'이다.
    이 속성은 거의 재설정되지 않는다. 속성값은 다음과 같은 것들이 있다: 
        DEFAULT: DB에서 설정한 격리 수준을 그대로 따름
        READ_UNCOMMITTED: 커밋되지 않은 읽기 (실무에서 우세)
        READ_COMMITTED: 커밋된 읽기 (실무에서 우세)
        REPEATABLE_READ: 반복 가능한 읽기
        SERIALIZABLE: 직렬화 가능


* timeout
    트랜잭션 수행 시간에 대한 타임아웃을 초 단위로 지정해준다. 기본값은 트랜잭션 시스템의 타임아웃을 사용한다.
    운영 환경에 따라 동작하는 경우도 있고 아닌 경우도 있어 꼭 확인하고 사용해야 한다.
    timeoutString도 있는데, 이는 숫자 대신 문자값으로 지정한다.


* label
    트랜잭션 어노테이션에 있는 값을 직접 읽어서 어떤 동작을 하고 싶을 때만 사용할 수 있다.
    이것도 거의 사용되지 않는다.


* readOnly
    false가 기본값이다. 즉, 트랜잭션은 기본적으로 읽기와 쓰기가 모두 가능하다.
    true를 적용해주면 해당 메서드는 읽기 전용 트랜잭션이 적용되어 insert, update, delete 등의 쿼리가 불가능하다.
    잘 사용하면 성능 최적화에 도움이 된다.
    JdbcTemplate의 경우 readOnly = true인 메서드에서 변경 쿼리를 요구하면 예외를 던진다.
    JPA의 경우 readOnly = true인 메서드에서 변경 쿼리를 요구하면 커밋 시점에 flush를 호출하지 않는다. 
    읽기전용이기 때문에 데이터 변경이랑 관련된 flush만 호출하지 않으면 된다. 
    애초부터 em.flush()는 뭐가 변경되었는지 찾아서 DB에 쿼리를 보내는 것이기 때문이다.

    특히 JPA를 쓸 때는 readOnly = true에 의한 최적화 효과가 나름 좋을 수도 있다.
    하지만 DB마다 별도의 추가적인 통신이 생길 수 있어 테스트를 해보고 적용 여부를 결정하도록 한다.



- 예외와 트랜잭션 커밋/롤백 기본
예외가 발생했는데 내부에서 예외를 처리하지 못하고, 트랜잭션 범위 밖으로 예외를 던지면 어떻게 될까?
Repository에서 예외가 발생했다고 해보자. 그러면 Service로 예외가 던져질 것이고, Service의 예외는 서비스 프록시 객체로 던져질 것이다.
프록시 객체에서는 발생한 예외의 종류에 따라 커밋하거나 롤백을 한다. 런타임 예외는 롤백시키고, 체크 예외는 커밋시킨다.

@SpringBootTest
@Slf4j
public class RollbackTest {

    static class MyException extends Exception {
    }

    @TestConfiguration
    static class RollbackTestConfig {
        @Bean
        RollbackService rollbackService() {
            return new RollbackService();
        }
    }

    static class RollbackService {
        // 런타임 예외 발생: 롤백
        @Transactional
        public void runtimeException() {
            log.info("call runtimeException");
            throw new RuntimeException();
        }

        // 체크 예외 발생: 커밋
        @Transactional
        public void checkedException() throws MyException {
            log.info("call checkedException");
            throw new MyException();
        }

        // 체크 예외 rollbackFor 처리하기\
        @Transactional(rollbackFor = MyException.class)
        public void rollbackFor() throws MyException {
            log.info("call rollbackFor checkedException");
            throw new MyException();
        }
    }

    @Autowired RollbackService rollbackService;

    @Test
    void runtimeExceptionTest() {
        assertThatThrownBy(() -> rollbackService.runtimeException())
                .isInstanceOf(RuntimeException.class);
    }

    @Test
    void checkedException() throws MyException {
        assertThatThrownBy(() -> rollbackService.checkedException())
                .isInstanceOf(MyException.class);
    }

    @Test
    void rollbackFor() throws MyException {
        assertThatThrownBy(() -> rollbackService.rollbackFor())
                .isInstanceOf(MyException.class);
    }

}

주요 로그 살펴보기:
    런타임
    ... JpaTransactionManager        : Rolling back JPA transaction on EntityManager [SessionImpl(755477196<open>)]

    체크 예외
    ... JpaTransactionManager        : Committing JPA transaction on EntityManager [SessionImpl(1317903286<open>)]
    
    체크예외 + rollbackFor 
    ... JpaTransactionManager        : Rolling back JPA transaction on EntityManager [SessionImpl(711135305<open>)]

* 참고: application.properties에 아래의 설정값을 추가했다:
logging.level.org.springframework.jdbc.datasource.DataSourceTransactionManager=DEBUG
    DataSourceTransactionManager는 JDBC 기반의 트랜잭션 관리자를 담당하는 클래스이다.
    이 설정을 통해 JDBC 트랜잭션 관리와 관련된 자세한 디버깅 정보를 로그에 출력할 수 있다.

logging.level.org.springframework.orm.jpa.JpaTransactionManager=DEBUG
    JpaTransactionManager는 JPA(Java Persistence API)를 사용하는 애플리케이션에서 트랜잭션 관리를 담당하는 클래스이다.
    이 설정을 통해 JPA와 관련된 트랜잭션 관리 작업의 디버깅 정보를 로그에 출력할 수 있다.

logging.level.org.hibernate.resource.transaction=DEBUG
    이 설정은 Hibernate의 트랜잭션 관리와 관련된 모든 클래스에 대해 디버깅 정보를 출력하게 한다.
    Hibernate는 JPA의 구현체 중 하나로, 이 설정을 통해 트랜잭션과 관련된 Hibernate 내부의 상세한 동작을 로그로 확인할 수 있다.

여기서 사용된 로그는 특히 두 번째 설정과 관련된다. 



- 예외와 트랜잭션 커밋/롤백 활용
왜 스프링은 체크 예외에 대해서는 트랜잭션 커밋을 시키는 걸까?
스프링의 예외 처리 철학에서 체크 예외는 메서드가 반드시 처리해야 하는 예외로, 컴파일 시점에 강제된다. 
일반적으로 체크 예외는 애플리케이션에서 예상 가능하고 회복 가능한 상황이라고 가정한다.
또, 체크 예외는 비즈니스 로직에서 종종 예외적이지만 허용 가능한 상황이라고 가정한다.
즉, 체크 예외는 정상 프로세스는 아니더라도 비즈니스 시나리오 중 하나로 취급을 할 수 있다는 것이다. 
이런 상황에서는 애플리케이션의 정상적인 흐름을 유지하면서 특정 예외 상황을 처리할 수 있어야 한다.
그렇기 때문에 스프링에서는 체크 예외가 발생해도 커밋을 시켜 비즈니스 로직을 정상적으로 완료시키도록 설계되어 있다.

* 참고
물론 이는 어디까지나 스프링의 기본 가정이기 때문에 회사의 비즈니스 로직과 스프링의 예외 철학이 맞지 않으면
rollbackFor를 통해 체크 예외도 롤백을 시키거나, 런타임 예외를 상속하는 커스텀 예외를 따로 만들어서 던지게 한다.

예를 들어, 주문을 하는데 상황에 따라 다음과 같이 조치한다고 해보자:
    1. 정상 - 결제 성공 시 주문 데이터를 저장하고 결제 상태를 '완료'로 변경
    2. 시스템 예외 - 주문 시 내부에 복구 불가능한 예외가 발생하면 전체 로직을 롤백
    3. 비즈니스 예외 - 주문시 결제 잔고가 부족하면 주문 데이터를 저장하고, 결제 상태를 '대기'로 처리
                          이 경우 고객에게 잔고 부족을 알리고 별도의 계좌로 입금하도록 안내한다.
3번의 경우 NotEnounghMoneyException이라는 체크 예외를 발생시킨다고 가정한다.
이 예외는 시스템에 문제가 발생하는 예외가 아니라, 시스템은 정상 동작하지만 비즈니스 상황에 문제가 생겨서 발생한 예외이다.
즉, 시스템 자체에 문제가 있는 게 아니다. 그래서 시스템 예외가 아니라 비즈니스 예외라고 부르는 것이다.
이 경우에는 롤백을 하면 주문 데이터가 다 사라져버리기 때문에 롤백을 하면 안 된다.
고객에게 입금을 하도록 안내하는 것이 목적이지, 주문 데이터를 아예 삭제시켜버리면 고객은 큰 불편을 겪게 될 것이다.
이와 같이, 비즈니스 예외는 그 자체로 비즈니스적인 의미가 있기 때문에,
단순히 롤백시키면 안 되고, 예외 상황에 적절한 비즈니스적 대응을 해주어야 하는 경우가 많다.

학습을 위해 필요한 클래스들은 아래와 같다: NotEnoughMoneyException, Order, OrderRepository, OrderService 

public class NotEnoughMoneyException extends Exception {
    public NotEnoughMoneyException(String message) {
        super(message);
    }
}

@Entity
@Table(name = "orders")
@Getter
@Setter
public class Order {
    @Id
    @GeneratedValue
    private Long id;

    private String orderStatus;

    private String payStatus;

}

@Repository
public interface OrderRepository extends JpaRepository<Order, Long> {
}

@Service
@Slf4j
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;

    @Transactional
    public void order(Order order) throws NotEnoughMoneyException {
        log.info("order 메서드 호출");
        orderRepository.save(order);

        log.info("결제 프로세스 진입");
        if (order.getOrderStatus().equals("예외")) {
            log.info("시스템 예외 발생");
            throw new RuntimeException("RuntimeException!!!");
        }
        else if (order.getOrderStatus().equals("잔고부족")) {
            log.info("잔고 부족 예외 발생");
            order.setPayStatus("대기");
            throw new NotEnoughMoneyException("잔고가 부족합니다.");
        }
        else {
            log.info("정상 승인");
            order.setPayStatus("완료");
        }
        log.info("결제 프로세스 완료");
    }
}

* NotEnoughMoneyException은 체크 예외이기 때문에 클래스 앞에 throws NotEnoughMoneyException를 선언해주는 모습을 볼 수 있다.

* 참고로, 실무에서 엔티티에 @Setter를 남발하여 불필요하게 변경 포인트를 노출하는 것은 좋지 않다.

* Order의 테이블명을 orders 라고 설정한 건 DB 예약어인 order by 때문이다.

* 잔고 부족 예외 발생 시에는 payStatus를 대기 상태로 두고, 체크 예외가 발생하지만 order 데이터는 커밋되도록 하였다.



- 테스트 코드
@SpringBootTest
@Slf4j
class OrderServiceTest {
    @Autowired OrderService orderService;
    @Autowired OrderRepository orderRepository;

    @Test
    void complete() throws NotEnoughMoneyException {
        Order order = new Order();
        order.setOrderStatus("정상");

        orderService.order(order);

        Order foundOrder = orderRepository.findById(order.getId()).get();
        assertThat(foundOrder.getPayStatus()).isEqualTo("완료");
    }

    @Test
    void runtimeException() throws RuntimeException {
        Order order = new Order();
        order.setOrderStatus("예외");

        assertThatThrownBy(() -> orderService.order(order))
                .isInstanceOf(RuntimeException.class);

        Optional<Order> foundOrder = orderRepository.findById(order.getId());
        assertThat(foundOrder).isEmpty();
    }

    @Test
    void businessException() {
        Order order = new Order();
        order.setOrderStatus("잔고부족");

        assertThatThrownBy(() -> orderService.order(order))
                .isInstanceOf(NotEnoughMoneyException.class);

        Optional<Order> foundOrder = orderRepository.findById(order.getId());
        assertThat(foundOrder).isNotEmpty();
        assertThat(foundOrder.get().getPayStatus()).isEqualTo("대기");
    }
}

두 번째 테스트인 runtimeException 에서는 롤백이 일어난다.
그래서 assertThat(foundOrder).isEmpty(); 결과가 통과하게 되는 것이다.

세 번째 테스트인 businessException의 경우 체크 예외인 NotEnoughMoneyException가 발생하는데,
체크 예외는 rollbackFor 속성으로 지정해주지 않는 이상 그대로 커밋해버리기 때문에 
assertThat(foundOrder).isNotEmpty();
assertThat(foundOrder.get().getPayStatus()).isEqualTo("대기");
이 두 가지 검증을 통과하게 된다.

