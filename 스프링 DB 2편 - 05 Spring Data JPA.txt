- Spring Data JPA 소개
Repository에 JpaRepository를 구현했을 때, 코드가 없어도 CRUD가 되는데, 그렇다면 구현체는 어디있는가?
이 역시도 마찬가지로 동적 프록시 기술에 의해 구현체 프록시 클래스가 생성되는 방식이다.

Spring Data JPA는 메서드의 이름으로 쿼리를 생성하는 기능이 있다.
예를 들어 List<User> findByEmailAndName(String email, String name); 이런 메서드를 인터페이스에 선언해놓으면
프록시 Repository가 동적으로 생성될 때 
    SELECT m FROM Member m
    WHERE m.email =?1 AND m.name = ?2
이러한 JPQL이 동적으로 생성되고, 이 JPQL이 SQL문으로 번역되어 DB에 전송된다.
이렇게 메서드의 이름을 보고 Spring Data JPA가 JPQL을 동적으로 만들어주는 것이다.

아니면 @Query 어노테이션을 활용해서 직접 실행할 JPQL문을 작성할 수도 있다.
    @Query("select u from User u where u.emailAddress = ?1")
    User findByEmailAddress(String emailAddress);

이 @Query 어노테이션은 nativeQuery = true 라는 속성을 걸면 네이티브 쿼리도 지원한다.
    @Query(value = "select * from users where email_address = ?0", nativeQuery = true)
    User findByEmailAddress(String emailAddress);



- Spring Data JPA의 장점
    * 코딩량이 확 줄어든다. 과거로 돌아가기가 힘들다.
    * 도메인 클래스를 중요하게 다루게 됨
    * 비즈니스 로직을 이해하기 쉬워짐
    * 더 많은 테스트 케이스 작성 가능
  


- Spring Data JPA의 주요 기능
Spring Data 까지는 Repository <-- CrudRepository <-- PagingAndSortingRepoository 순으로 상속이 이루어지며,
이 이하로 JpaRepository부터 Spring Data JPA라고 부를 수 있게 된다.
이 인터페이스에는 공통화 가능한 거의 모든 기능들이 포함되어 있다.

Spring Data JPA는 쿼리 메서드 기능을 제공한다. 인터페이스에 메서드 이름을 적어두면, 메서드의 이름을 분석하여 
쿼리를 자동으로 만들고 실행해주는 것이다.

    public List<Member> findByUsernameAndAgeGreaterThan(String username, int age);

이는 곧 다음의 JPQL을 생성한다. 순수 JPA로 치면 아래와 같은 코드이다:
    return em.createQuery("select m from Member m where m.username = :username and m.age > :age")
            .setParameter("username", username)
            .setParameter("age", age)
            .getResultList();

Spring Data JPA가 제공하는 쿼리 메서드 기능은 다음과 같다: 
    * 주요 접두사
        findBy { }
        readBy { }
        queryBy { }
        getBy { }
        countBy { } : 주어진 조건에 일치하는 엔티티의 개수를 반환
        existsBy { } : 주어진 조건에 일치하는 엔티티의 존재 여부 반환

    * 주요 키워드
        And : 조건을 결합
	List<User> findByFirstNameAndLastName(String firstName, String lastName)

        Or	 : 조건 중 하나라도 만족하면 조회
	List<User> findByFirstNameOrLastName(String firstName, String lastName)

        Between : 범위 조건을 지정함
	List<User> findByAgeBetween(int startAge, int endAge)

        LessThan : 보다 작은 값 조회
	List<User> findByAgeLessThan(int age)

        LessThanEqual : 보다 작거나 같은 값 조회
	List<User> findByAgeLessThanEqual(int age)

        GreaterThan : 보다 큰 값 조회
	List<User> findByAgeGreaterThan(int age)

        GreaterThanEqual : 보다 크거나 같은 값 조회
	List<User> findByAgeGreaterThanEqual(int age)

        Like : 패턴 매칭
	List<User> findByEmailLike(String emailPattern)

        Not : 부정 조건 지정
	List<User> findByNameNot(String name)

        In : 주어진 컬렉션에 속하는 값 조회
	List<User> findByAgeIn(Collection<Integer> ages)

        NotIn : 주어진 컬렉션에 속하지 않는 값 조회
	List<User> findByAgeNotIn(Collection<Integer> ages)
	
        OrderBy ~ ASC
        OrderBy ~ DESC : 결과를 정렬
	List<User> findByNameOrderByAgeAsc(String name)

        IsNull : null인 값들만 조회
	List<User> findByAgeIsNull()

        IsNotNull : null 이 아닌 값들만 조회
	List<User> findByAgeIsNotNull()

        StartingWith : 특정 문자열로 시작하는 값 조회
	List<User> findByNameStartingWith(String prefix)

        EndingWith : 특정 문자열로 끝나는 값 조회
	List<User> findByNameEndingWith(String suffix)

        Containing : 특정 문자열을 포함하는 값 조회
	List<User> findByNameContaining(String infix)

        True : true인 값들만 조회
	List<User> findByActiveTrue()

        False : false인 값들만 조회
	List<User> findByActiveFalse()


@Query 어노테이션은, 파라미터가 여러 가지라서 메서드명이 너무 길어지는 것이 싫을 때 사용하면 유용하다.
    @Query("select i from Item i where i.itemName like :itemName and i.price <= :price")
    List<Item> findItems(@Parm("itemName") String itemName, @Parm("price") Integer price);



- Spring Data JPA와 @Query 어노테이션

    List<Item> findByItemNameLike(String itemName);

    List<Item> findByPriceLessThanEquals(Integer price);

    // 쿼리 메서드 자동생성 방식
    List<Item> findByItemNameLikeAndPriceLessThanEquals(String itemName, Integer price);

    // @Query 어노테이션 방식
    @Query("select i from Item i where i.itemName like :itemName and i.price <= :price")
    List<Item> findItems(@Param("itemName") String itemName, @Param("price") Integer price);

위에는 쿼리 메서드를 활용한 모습이다. 쿼리 메서드를 활용하면 간단한 조건의 조회는 쿼리 메서드만으로 쉽게 해결 가능하다.
그러나 조건에 필요한 속성이 여러 개일 경우 메서드의 이름이 너무 길어진다는 단점이 있다.
그럴 때는 아래 메서드와 같이 @Query 어노테이션을 활용할 수 있다.

추가적으로 짚고 넘어가야 할 문제는, 만약 조건에 필요한 속성이 있거나 없을 때 동적으로 해결하려면 어떻게 해야할까?
Spring Data JPA만으로는 해결이 어렵다. 그 조건들에 대해 전부 저렇게 @Query 어노테이션으로 일일히 정의하는 것도 매우 힘든 일이 된다.
이러한 동적 쿼리들을 생성할 때 생기는 어려움은 Spring Data JPA만으로는 안 되고, Querydsl이 필요하다.
또, 쿼리 메서드는 join 같은 복잡한 조건은 사용할 수 없기 때문에 Spring Data JPA만으로는 한계가 있다.
또, 쿼리 메서드를 작성하려는 의도로 메서드명을 적을 때, 오타가 발생해도 커스텀 명칭인지 쿼리 메서드 명칭인지 
IDE는 개발자의 의도를 모르기 때문에 쿼리 메서드명에 오타가 발생해도 컴파일러가 잡아주지 못한다.



- 쿼리 메서드와 @Query의 파라미터 바인딩
    * 쿼리 메서드를 통해 자동으로 JPQL을 생성할 때는 파라미터를 순서대로 입력해야 한다.
        List<Item> findByItemNameLikeAndPriceLessThanEquals(String itemName, Integer price);

    * @Query 어노테이션을 통한 JPQL 작성 시에는 @Param(" ~ ") 어노테이션을 통해 파라미터 바인딩을 해주어야 한다.
        @Query("select i from Item i where i.itemName like :itemName and i.price <= :price")
        List<Item> findItems(@Param("itemName") String itemName, @Param("price") Integer price);



- SpringDataJpaItemRepository로 구현체 갈아끼우기
ItemService에서 SpringDataJpaItemRepository를 직접 주입 받아서 사용하게 되면 어떻게 될까?
그렇게 되면 SpringDataJpaItemRepository에 ItemService가 의존하게 되는 문제가 생긴다.
기존에 사용하던 ItemRepository라는 인터페이스 자체를 갈아 치워버리게 된다는 말이다.
그리고 그렇게 되면 ItemService의 코드들을 SpringDataJpaItemRepository에 맞춰서 다 고쳐야 한다.
이는 인터페이스의 장점을 살리지 못하는 방법이다.

그럼 어떻게 해야 할까? ItemRepository를 구현한 클래스에 SpringDataJpaItemRepository 의존성을 주입한 클래스를 만들면 해결된다.
이를 JpaItemRepositoryV2 로 명명하고 만들어보겠다.

@Repository
@Transactional
@RequiredArgsConstructor
public class JpaItemRepositoryV2 implements ItemRepository {

    private final SpringDataJpaItemRepository repository;

    @Override
    public Item save(Item item) {
        return repository.save(item);
    }

    @Override
    public void update(Long itemId, ItemUpdateDto updateParam) {
        Item foundItem = repository.findById(itemId).orElseThrow();
        foundItem.setItemName(updateParam.getItemName());
        foundItem.setPrice(updateParam.getPrice());
        foundItem.setQuantity(updateParam.getQuantity());
    }

    @Override
    public Optional<Item> findById(Long id) {
        return repository.findById(id);
    }

    @Override
    public List<Item> findAll(ItemSearchCond cond) {
        String itemName = cond.getItemName();
        Integer maxPrice = cond.getMaxPrice();

        if (StringUtils.hasText(itemName) && maxPrice != null) {
//            return repository.findByItemNameLikeAndPriceLessThanEquals(itemName, maxPrice);
            return repository.findItems(itemName, maxPrice);
        } else if (StringUtils.hasText(itemName)) {
            return repository.findByItemNameLike(itemName);
        } else if (maxPrice != null) {
            return repository.findByPriceLessThanEquals(maxPrice);
        } else {
            return repository.findAll();
        }
    }
}

implements ItemRepository 
    ItemRepository 인터페이스를 구현한다고 했기 때문에 ItemService가 ItemRepository를 계속 의존할 수 있게 하였다.
    즉, Service 코드를 바꾸지 않아도 된다.
    
private final SpringDataJpaItemRepository repository;
    그 대신에, JpaItemRepositoryV2 클래스는 SpringDataJpaItemRepository 의존하도록 하여 
    결과적으로는 ItemRepository과 SpringDataJpaItemRepository의 중간다리 역할을 하게 되었다.

    결과적으로 실제 런타임에는 ItemService는 JpaItemRepositoryV2를 의존하게 되며,
    JpaItemRepositoryV2는 SpringDataJpaItemRepository의 프록시★ 객체에 의존하게 된다.

이제 메서드를 살펴보자.
findAll 제외하고는 그럭저럭 봐줄만 하다. 하지만 findAll 메서드를 보면 검색 조건이 더 늘어나면
이러한 방식으로 메서드를 사용하는 것은 더 힘들어질 것 같다는 불안함이 가시지 않는다.
물론 검색 조건이 두 개 정도밖에 되지 않는다면 저렇게 할만 하긴 한데 확장성이 떨어지기 때문에 비효율적이다.



- Spring Data JPA와 예외변환
Spring Data JPA도 스프링 예외 추상화를 지원한다.
즉, Spring Data JPA가 만들어주는 프록시 클래스에서 이미 예외 변환을 처리하기 때문에 
@Repository 어노테이션이 없어도 예외 추상화가 적용된다.

