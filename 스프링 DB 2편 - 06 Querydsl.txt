- QueryDSL 소개
Querydsl에서, 'dsl'은 Domain Specific Language의 약자로, 직역하면 '도메인 특화 언어'이다.
즉, 'DSL'이라는 것은 특정한 도메인에 초점을 맞춘 제한적인 표현력을 가진 컴퓨터 프로그래밍 언어라고 이해하면 된다.
그러므로 QueryDSL은 '쿼리에 특화된 언어'라고 볼 수 있다.

JPA를 사용하면 동적 쿼리 때문에 Querydsl을 반드시 함께 사용해야 한다. 
쿼리 DSL은 "쿼리를 추상화하겠다"는 목적으로 만들어졌다.

QueryDSL을 사용하기 위해서는 쿼리용 클래스가 필요한데, 그것은 QueryDSL에서 자동으로 생성해준다.
그 클래스를 Q클래스라 부른다. 그리고 이 Q클래스를 쿼리를 빌드할 때 사용한다.

    JPAQueryFactory query = new JPAQueryFactory(em);
    QMember m = QMember.member;

    List<Member> memberList = query
				.select(m)
				.from(m)
				.where(
				    m.age.between(20, 40).and(m.name.like("김%"))
				)
				.orderBy(m.age.desc())
				.limit(3)
				.fetch(m);

위와 같이 JPAQueryFactory와 Q클래스를 활용하여 query를 빌드하면 빌드된 query가 JQPL문을 생성하고, 그 JPQL문이 SQL로 번역되고,
번역된 SQL문을 통해 결과물이 반환되어 memberList 변수에 저장되는 것이다.
쉽게 말하면 "QueryDSL은 JPQL 빌더이다."★
Ctrl+Space 키를 누르면 입력 가능한 코드의 목록들이 쭉 뜨기 때문에 IDE의 지원을 받으면 더 편리하다. 

JPQL로 해결하기 어려운 복잡한 쿼리는 네이티브 SQL 쿼리를 사용할 수도 있다.



- Querydsl 설정하기
Querydsl은 설정하는 부분이 사용하면서 조금 귀찮은 부분인데,
IntelliJ가 버전업 하거나 Querydsl의 Gradle 설정이 버전업 하면서 적용 방법이 조금씩 달라지기도 한다.
그리고 본인의 환경에 따라서 잘 동작하지 않기도 한다.
공식 메뉴얼에 소개 되어 있는 부분이 아니기 때문에, 설정에 수고로움이 있지만
`querydsl gradle` 로 검색하여 본인 환경에 맞는 대안을 찾도록 한다.

ChatGPT에 물어볼 때 다음의 사항을 제시하여 제공하면 쉽게 찾을 수 있다.
    1) 스프링 부트 버전
    2) Gradle의 버전
    3) JPA 사용 여부
    4) 기존 의존성 내용들
    5) 소스 세트 구조 (src/main/java, src/main/resources 등)

* 빌드/실행 도구가 Gradle인 경우 라이브러리를 설치한 후, 코끼리 아이콘에 들어가서 다음과 같이 해준다:
    1) Gradle -> Tasks -> build -> clean
    2) Gradle -> Tasks -> other -> compileJava

* 참고로, Q클래스는 컴파일 시점에 자동 생성되기 때문에 굳이 git에 포함시키지 않는 것이 좋다.
특히 빌드/실행 옵션을 Gradle로 선택하면 build 폴더 아래에 Q클래스를 생성해주기 때문에 편한데,
IntelliJ 옵션을 선택했을 경우 main/generated 하위에 Q클래스가 생성되기 때문에 .gitignore에 이 경로를 등록해놓는 것이 좋다.

* 빌드/실행 도구가 IntelliJ인 경우 라이브러리 설치 후 애플리케이션(main 메서드)을 실행해주면 된다.
또는 망치 아이콘에 들어가서 Build Rerun 해주어도 된다.



- Querydsl 적용: JpaItemRepositoryV3 생성
Querydsl을 적용하기 위해서는 위와 같이 Q클래스도 필요하고, Repository 필드로 EntityManager와 JPAQueryFactory가 필요하다.
이때, JPAQueryFactory에는 EntityManager를 주입해주어야 한다:

    @Repository
    @Transactional
    public class JpaItemRepositoryV3 implements ItemRepository {

        private final EntityManager em;
        private final JPAQueryFactory query;

        public JpaItemRepositoryV3(EntityManager em) {
            this.em = em;
            this.query = new JPAQueryFactory(em);
        }
        
        ... 구현 메서드들
    
    }

JPAQueryFactory는 QueryDSL의 것인데, 바로 이것이 querydsl을 JPQL로 만들어주는 빌더역할을 해준다.
EntityManager가 바로 이 JPQL을 사용하여 DB와 상호작용을 하기 때문에 JPAQueryFactory의 내부에 EntityManager를 주입해주는 것이다.



- JpaItemRepositoryV3 구현 메서드들

    @Override
    public Item save(Item item) {
        em.persist(item);
        return item;
    }

    @Override
    public void update(Long itemId, ItemUpdateDto updateParam) {
        Item foundItem = em.find(Item.class, itemId);
        foundItem.setItemName(updateParam.getItemName());
        foundItem.setPrice(updateParam.getPrice());
        foundItem.setQuantity(updateParam.getQuantity());
    }

    @Override
    public Optional<Item> findById(Long id) {
        Item item = em.find(Item.class, id);
        return Optional.ofNullable(item);
    }

    @Override
    public List<Item> findAllOld(ItemSearchCond cond) {
        String itemName = cond.getItemName();
        Integer maxPrice = cond.getMaxPrice();

        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(itemName)) {
            builder.and(QItem.item.itemName.like("%"+itemName+"%"));
        }
        if (maxPrice != null) {
            builder.and(QItem.item.price.loe(maxPrice));
        }

        return query
                .select(QItem.item)
                .from(QItem.item)
                .where(builder)
                .fetch();
    }

위의 것들은 순수 JPA 코드와 똑같다. findAll 메서드의 경우만 달라졌는데,
BooleanBuilder 라는 객체를 생성하여, and() 메서드를 이용하여 조건에 따라 특정 쿼리 조건문을 빌드하게 하고,
그렇게 해서 만들어진 조건 빌더를 where() 메서드 안에 담아 동적으로 쿼리를 생성하게 하고 있다.
즉, BooleanBuilder는 동적으로 조건 쿼리문을 생성하게 해주는 조건 빌더라고 할 수 있다.

위 코드가 그렇게 나쁜 코드는 아니지만 불편한 점이 두 가지 있다.
1) 쿼리에 BooleanBuilder 코드까지 같이 들어가서 쿼리가 이뻐보이지 않다.
2) QItem이 꼴보기 싫다.

이것을 개선할 예정이기 때문에 findAllOld 라는 이름을 붙였다.



- 개선된 findAll
1) Q클래스를 static import 해버린다. 그러면 QItem.item이 아니라 그냥 item이라고 쓸 수 있다.
    import static hello.itemservice.domain.QItem.*;

2) BooleanBuilder 조건식들을 외부로 빼버려서 간단한 메서드로 모듈화시킨다. 이때, 반환 타입을 BooleanExpression 클래스를 사용한다.

    private BooleanExpression likeItemName(String itemName) {
        if (StringUtils.hasText(itemName)) {
            return item.itemName.like("%"+itemName+"%");
        }
        return null;
    }

    private BooleanExpression maxPrice(Integer maxPrice) {
        if (maxPrice != null) {
            return item.price.loe(maxPrice);
        }
        return null;
    }

각각의 조건들이 null이 아닐 경우에만 조건문이 적용된다. 즉, 조건이 동적으로 적용될 수 있게 되었다.
이렇게 조건 검사 후 BooleanExpression을 통해 조건식 또는 null을 반환하는 메서드는 다른 검색 로직에 재사용될 수 있다.

저렇게 조건식이 외부로 extract해서 빠져줬으니 이제 최종적으로 완성된 findAll 내부 로직을 살펴보자:

    @Override
    public List<Item> findAll(ItemSearchCond cond) {
        String itemName = cond.getItemName();
        Integer maxPrice = cond.getMaxPrice();

        return query
                .select(item)
                .from(item)
                .where(likeItemName(itemName), maxPrice(maxPrice))
                .fetch();
    }

파라미터로 사용될 변수 선언과 쿼리 빌더만으로 이루어진, 보기 좋고 깔끔한 동적 쿼리를 정의한 메서드가 완성되었다.


* TMI 참고: 
만약 조건이 null 을 반환할 경우 조건에서 그냥 무시되며, NullPointerException 같은 것도 발생하지 않는다.
애초부터 Querydsl은 내부적으로 이러한 BooleanExpression을 결합할 때
null 값을 안전하게 처리하여 NullPointerException이 발생하지 않도록 설계되어 있다. 

    public QBean<T> where(Predicate... o) {
        // 내부적으로 null 값을 필터링합니다.
        Predicate combined = ExpressionUtils.allOf(o);
        if (combined != null) {
            this.query.where(combined);
        }
        return this;
    }
ExpressionUtils.allOf 메서드는 전달된 Predicate 배열에서 null이 아닌 조건들만 선택하여 결합하기 때문에
null 값이 포함되어도 안전하게 무시되는 것이다.


