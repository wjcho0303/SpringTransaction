- DTO 데이터 전송 객체
    * DTO는 기능이 없고 데이터를 전달하는 용도로 사용되는 객체이다.
      물론 기능이 반드시 없어야 한다는 것은 아니며, 단지 주 목적이 데이터 전송이라는 의미이다.
    * DTO 이름을 만드는 것은 팀 내에서 협의하면 된다.



- 프로젝트 시작 상태: MemoryItemRepository
실습 초반에는 H2를 사용하지 않고 메모리 기반으로 데이터를 관리하게 된다.
그렇기 때문에 ItemRepository의 구현체로 'MemoryItemRepository'를 사용한다.
그렇기 때문에 구현 로직에 SQL문이 없고 데이터 구조는 Map 인터페이스 (구현체 HashMap)를 채택하고 있다.



- 프로젝트 시작 상태: ItemService
ItemService를 인터페이스로 만든 이유는 실습 예제를 바꿔가며 서비스 구현체를 다르게 적용하기 위함이다.
현업에서 Service를 인터페이스로 만드는 경우는 많지 않다는 점 참고하자.



- 프로젝트 시작 상태: 수동 빈 등록 부분 MemoryConfig
    @Bean
    public ItemService itemService() {
        return new ItemServiceV1(itemRepository());
    }

    @Bean
    public ItemRepository itemRepository() {
        return new MemoryItemRepository();
    }

서비스와 리포지토리의 구현체를 편리하게 변경하기 위해 수동으로 빈을 등록하였다.



- 프로젝트 시작 상태: TestDataInit와 @EventListener(ApplicationReadyEvent.class)
메모리 방식으로 데이터를 관리하는 프로젝트이기 때문에 서버를 띄울 때 샘플 데이터를 넣어주는 용도이다.
@EventListener(ApplicationReadyEvent.class) 이 애너테이션은 스프링 컨테이너가 완전히 초기화를 다 끝내고,
실행 준비가 되었을 때 발생하는 이벤트이다. 스프링이 이 시점에 이 애너테이션이 달린 메서드를 호출해준다.

* 참고
@PostConstruct를 사용할 경우 AOP 같은 부분이 아직 다 처리되지 않은 시점에 호출될 수 있기 때문에 간혹 문제가 발생한다.
예를 들어 @Transactional과 관련된 AOP가 적용되지 않은 상태로 호출될 수 있다.
반면, @EventListener(ApplicationReadyEvent.class)는 AOP를 포함해서 스프링 컨테이너가 초기화를 완전히 마친 후에 호출해주기 때문에
위와 같은 문제를 방지할 수 있다.



- 프로젝트 시작 상태: 앱 실행 파일

    @Import(MemoryConfig.class)
    @SpringBootApplication(scanBasePackages = "hello.itemservice.web")
    public class ItemServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(ItemServiceApplication.class, args);
        }

        @Bean
        @Profile("local")
        public TestDataInit testDataInit(ItemRepository itemRepository) {
            return new TestDataInit(itemRepository);
        }
    }

* @Import(MemoryConfig.class) 부분은 앞서 설정한 MemoryConfig를 설정 파일로 사용한다는 의미이다.
* @SpringBootApplication 애너테이션의 scanBasePackages 속성은 컴포넌트 스캔 경로를 지정하는 기능이다.
  컨트롤러만 컴포넌트 스캔을 적용하고, 나머지는 직접 수동 등록하므로 컴포넌트 스캔 경로를 hello.itemservice.web 하위로 지정한 것이다.
* @Profile("local") 은 특정 프로필의 경우에만 해당 스프링 빈을 등록한다. 여기서는 'local'이라는 이름의 프로필이 사용되는 경우에만
  testDataInit을 스프링 빈으로 등록하겠다는 것이다. application.properties 라는 파일에 보면 이런 내용이 있다:
      spring.profiles.active=local
  이는 local 이라는 프로필을 활성화한다는 설정이다. 이 설정값과 @Profile 애너테이션 값이 상응하기 때문에 앱을 실행할 때 
  testDataInit의 메서드가 실행될 수 있는 것이다.

스프링은 로딩 시점에 application 설정 파일에서 spring.profiles.active 속성 값을 읽어서 프로필로 사용한다.
이 프로필은 로컬, 운영 환경, 테스트 실행 등 다양한 환경에 따라 다른 설정을 할 때 사용하는 정보이다.
예를 들어 로컬에서는 로컬에 설치된 DB에 접근해야 하고, 운영에서는 운영 DB에 접근해야 한다면 서로 설정 정보가 달라야 한다.
심지어 어떤 경우에는 환경에 따라서 다른 스프링 빈을 등록해야 할 때도 있다.
프로필 어노테이션과 서로 다른 설정 파일을 사용하면 이런 문제를 깔끔하게 해결할 수 있다.

현재는 src/main/resource 하위에 application.properties에 있으므로 /src/main 하위의 자바 객체를 실행할 때 local 이라는 프로필로 동작한다. 
만약 여기의 값을 spring.profiles.active=nono 라고 하면 어떻게 될까?

    @Bean
    @Profile("local")
    public TestDataInit testDataInit(ItemRepository itemRepository) {
        return new TestDataInit(itemRepository);
    }

이 빈이 컨테이너에 등록되지 않게 된다. 이 빈은 spring.profiles.active 값이 'local' 이어야만 빈으로 등록된다.
만약 spring.profiles.active 설정을 생략하면 'default'라는 프로필을 활성화한다.


만약 테스트 환경에서는 데이터 관리를 따로 하고 싶으면 어떻게 해야 할까?
src/main 패키지 말고 src/test 패키지에 resources 디렉토리를 생성하고 거기에 application.properties를 만든 후,
    spring.profiles.active=test
이렇게 적으면 된다. 실제로, 스프링은 test 패키지 내에서 실행하면 src/test/resources/ 위치의 설정 파일을 먼저 읽는다.
그렇게 되면 test를 실행할 때는 'test'라는 프로필로 동작하는 것이다. 그렇기 때문에 테스트 환경에서는 testDataInit이 적용되지 않아
독립적으로 테스트를 실행할 수 있다.



- 테이블 기본키를 선택하는 전략 2가지
1) 자연키(natural key)
    - 비즈니스적인 의미를 가지는 키 값 ex) 주민등록번호, 이메일, 전화번호 등

2) 대리키(surrogate key)
    - 비즈니스적 의미가 없는 키. 대체키로도 불린다. ex) 오라클 시퀀스, auto_increment, identity, 키생성 테이블 등

자연키보다는 대리키 사용이 권장된다. 비즈니스적인 의미를 가지는 키 값들은
변할 가능성이나 중복 가능성이 적긴 해도 아예 없지는 않다. 
예를 들어 주민등록번호나 휴대폰 번호는 매우 가능성이 적지만 행정 개편이 된다면 변할 가능성이 있다.

참고로, JPA는 모든 엔티티에 일관된 방식의 대리키 사용을 권장한다.



- JdbcTemplate 소개
SQL을 직접 작성하는 환경의 경우, JdbcTemplate은 매우 좋은 선택지이다. JdbcTemplate을 통해 JDBC 코드를 많이 생략할 수 있다.

    장점)
    JdbcTemplate은 spring-jdbc 라이브러리에 포함되어 있으며, 이 라이브러리는 스프링으로 JDBC를 사용할 때
    기본으로 사용되는 라이브러리다. 별도의 복잡한 설정 없이 바로 사용이 가능하다는 장점이 있다.

    JdbcTemplate은 템플릿 콜백 패턴을 사용하기 때문에 JDBC를 직접 사용할 때 발생하는 대부분의 반복 작업을 대신 처리해준다: 
    Connection 획득, statement 준비 및 실행, 결과 반복 루프 실행, conn/pstmt/rs 종료, 트랜잭션 Connection 동기화, 스프링 예외 변환 적용 
    그렇기 때문에 개발자는 SQL 작성, 전달 파라미터 정의, 응답 값 매핑 이 세 가지만 하면 된다.


    단점)
    동적 SQL이 어렵다.
    


- JdbcTemplateItemRepositoryV1
* 필드 및 생성자

    private final JdbcTemplate jdbcTemplate;

    public JdbcTemplateItemRepositoryV1(DataSource dataSource) {
        this.jdbcTemplate = new JdbcTemplate(dataSource);
    }

자체 생성자에는 DataSource를 파라미터로 받아야 하며, 입력 받은 DataSource를 JdbcTemplate 구현체 생성자에 입력해줘야 한다.


* save 메서드
public Item save(Item item) {
    String sql = "insert into item(item_name, price, quantity) values (?,?,?)";
    KeyHolder keyHolder = new GeneratedKeyHolder();
    jdbcTemplate.update(connection -> {
        // 자동 증가 키
        PreparedStatement ps = connection.prepareStatement(sql, new String[]{"id"});
        ps.setString(1, item.getItemName());
        ps.setInt(2, item.getPrice());
        ps.setInt(3, item.getQuantity());
        return ps;
    }, keyHolder);

    long key = keyHolder.getKey().longValue();
    item.setId(key);

    return item;
}

    * jdbctemplate.update() 메서드는 데이터 변경과 관련된 DB 작업을 지원한다. INSERT, UPDATE, DELETE SQL에 사용한다.

    * 코드가 꽤 복잡한 이유는 데이터를 저장할 때 auto increment 방식을 사용해야 하기 때문이다.
      DB가 PK인 ID를 대신 생성해주기 때문에 DB에 INSERT가 완료되어야 생성된 PK ID를 확인할 수 있다.
      그렇기 때문에 KeyHolder와 Connection.prepareStatement(sql, new String[]{"id"})를 사용하여 id를 지정하고,
      INSERT 쿼리 후에 DB에서 생성된 ID값을 조회하는 것이다. 후에 이 코드도 SimpleJdbcInsert라는 편리한 기능으로 대체될 예정이니,
      사용법을 익힐 필요는 없고 이런 과정을 거쳐야 하는구나 정도로만 이해하면 된다.


* update 메서드
public Optional<Item> findById(Long id) {
    String sql = "update item set item_name=?, price=?, quantity=? where id=?";
    jdbcTemplate.update(sql,
            updateParam.getItemName(),
            updateParam.getPrice(),
            updateParam.getQuantity(),
            itemId);
}

    * 여기도 save와 마찬가지로 jdbctemplate.update()를 사용하면 된다. 이때, jdbctemplate.update()의 파라미터는 다음과 같다:
      1) sql: 실행할 쿼리,
      2) '?' 파라미터 지시자에 들어갈 필드들: updateParam.getItemName(), updateParam.getPrice(), updateParam.getQuantity(), itemId
         이때, '?'에 들어갈 파라미터들의 순서를 정확하게 해주어야 한다.


* findById 메서드
public Optional<Item> findById(Long id) {
    String sql = "select id, item_name, price, quantity from item where id = ?";
    try {
        Item item = jdbcTemplate.queryForObject(sql, itemRowMapper(), id);
        return Optional.of(item);
    } catch (EmptyResultDataAccessException e) {
        return Optional.empty();
    }
}

private RowMapper<Item> itemRowMapper() {
    return ((rs, rowNum) -> {
        Item item = new Item();
        item.setId(rs.getLong("id"));
        item.setItemName(rs.getString("item_name"));
        item.setPrice(rs.getInt("price"));
        item.setQuantity(rs.getInt("quantity"));
        return item;
    });
}

데이터를 하나만 조회하기 때문에 jdbcTemplate.queryForObject() 메서드를 사용한다.
조회 결과 나오는 DB 데이터를 객체로 매핑해줘야 하기 때문에 RowMapper<Item> 객체가 사용된다.
jdbcTemplate.queryForObject() 메서드에 들어가는 파라미터는 각각 sql문 문자열, RowMapper<Item>, id 값이다.
JDBC를 직접 사용할 때 ResultSet을 사용했던 것을 생각하면 된다.
차이점은 JdbcTemplate에서는 JDBC에서 했던 resultSet이 끝날 때까지 루프를 돌려주는 작업을 자동으로 해준다는 점이다.

    while(resultSet 이 끝날 때 까지) {
        rowMapper(rs, rowNum)
    }

만약 데이터가 조회되지 않을 경우 EmptyResultDataAccessException이 던지고, 이를 잡아서 Optional.empty()로 반환한다.
만약 결과가 둘 이상일 때는 IncorrectResultSizeDataAccessException 예외가 발생한다. 


* findAll 메서드 (검색 기반)
    public List<Item> findAll(ItemSearchCond cond) {
        String itemName = cond.getItemName();
        Integer maxPrice = cond.getMaxPrice();

        String sql = "select id, item_name, price, quantity from item";

        // 동적으로 쿼리를 작성하는 부분
        if (StringUtils.hasText(itemName) || maxPrice != null) {
            sql += " where";
        }
        boolean andFlag = false;
        List<Object> param = new ArrayList<>();
        if (StringUtils.hasText(itemName)) {
            sql += " item_name like concat('%',?,'%')";
            param.add(itemName);
            andFlag = true;
        }
        if (maxPrice != null) {
            if (andFlag) {
                sql += " and";
            }
            sql += " price <= ?";
            param.add(maxPrice);
        }
        log.info("sql={}", sql);

        return jdbcTemplate.query(sql, itemRowMapper(), param.toArray());
    }

마지막을 보면 jdbcTemplate.query() 메서드를 사용하고 있다. 이 메서드는 조회 결과가 하나 이상일 때 사용하며,
반환 타입을 Collection으로 한다. 예제에서는 List로 반환하고 있다. 만약 결과가 없어도 빈 Collection을 반환한다.

동적으로 SQL문 문자열을 변경해야 하기 때문에 파라미터의 null 여부에 따라 SQL문 문자열을 합치고 있다.
이는 다음 주제에서 더 깊이 다루도록 한다.



- JdbcTemplate의 동적 쿼리 문제
검색 기능을 지원하는 쿼리를 사용할 때는 사용자가 검색하는 값에 따라 실행하는 SQL이 동적으로 달라져야 한다.
예를 들면 다음과 같다:

    검색 조건이 없음
    select id, item_name, price, quantity from item

    상품명으로 검색
    select id, item_name, price, quantity from item
    where item_name like concat('%',?,'%')

    최대 가격으로 검색
    select id, item_name, price, quantity from item
    where price <= ?

    상품명, 최대가격 조건 모두 적용
    select id, item_name, price, quantity from item
    where item_name like concat('%',?,'%')
    and
    where price <= ?

지금은 검색 조건이 두 가지 밖에 없어서 크게 복잡해보이지 않을 수 있지만 검색 조건이 많아질수록
쿼리의 복잡한 정도와 작성해야 할 경우의 수가 굉장히 크게 증가한다. 심지어 순수 문자열을 조합시키는 것이기 때문에
경우에 따라 어떤 조건을 where 또는 and 로 두어야 하는지 결정해야 하는 문제도 있다.
실무에서는 위 보다 훨씬 복잡한 조건으로 요청이 들어오기 때문에 코드를 이런 식으로 직접 짜보면 분명히 버그가 생길 것이다...



- JdbcTemplateItemRepositoryV1을 ItemRepository 구현체로 적용시키기
@Configuration
@RequiredArgsConstructor
public class JdbcTemplateV1Config {

    private final DataSource dataSource;

    @Bean
    public ItemRepository itemRepository() {
        return new JdbcTemplateItemRepositoryV1(dataSource);
    }

    @Bean
    public ItemService itemService() {
        return new ItemServiceV1(itemRepository());
    }
}

위와 같은 Config 파일을 만들어주고, 기존의 @Import(MemoryConfig.class)를 지우고 다음과 같이 해주면 된다.

    @Import(JdbcTemplateV1Config.class)
    @SpringBootApplication(scanBasePackages = "hello.itemservice.web")
    public class ItemServiceApplication {
        ...
    }

그리고 application.properties에도 H2 DB 접속 정보들을 입력해넣으면 된다.
이렇게 설정 정보를 입력해놓으면 스프링 부트가 이 설정값들을 사용하여 Connection Pool, DataSource, 트랜잭션 매니저를
스프링 빈으로 자동으로 등록해준다.
    spring.datasource.url=jdbc:h2:tcp://localhost/~/test
    spring.datasource.username=sa
    spring.datasource.password=

만약 logging.level.org.springframework.jdbc=debug 이 설정값도 추가하면 쿼리를 호출할 때 다음과 같은 로그가 뜬다.
    Executing prepared SQL statement [select id, item_name, price, quantity from item]



- JdbcTemplate 이름 지정 파라미터1
위 예제에서 JdbcTemplate으로 update 쿼리를 사용할 때 getter를 호출하여 '?' 지시자에 파라미터 바인딩을 했었다.
하지만 그 방식은 파라미터 바인딩의 순서를 반드시 지켜주어야 했기 때문에 불편한 점이 있었다.

특히 SQL문을 수정하게 될 경우 파라미터 바인딩도 같이 바꿔주어야 한다.
만약 타입이 동일한 컬럼인데 SQL문에서 컬럼 간의 순서를 바꿔버리면 SQL 오류가 뜨지도 않기 때문에 데이터가 잘못 들어가는
버그가 발생하게 된다. 버그 중에서 가장 고치기 힘든 버그는 DB에 데이터가 잘못 들어가는 버그이다.

이것은 코드만 고치면 되는 게 아니라 데이터를 복구해야 하기 때문에 버그를 해결하기 위한 노력이 더 많이 요구된다.
실제로 수많은 개발자들이 이 문제로 장애를 내고 퇴근하지 못하는 일이 발생하곤 했다.
그도 그럴 것이, 실무에서는 파라미터가 10~20개 넘어가는 일도 굉장히 많기 때문에 실수하기 굉장히 쉽다.



- JdbcTemplateItemRepositoryV2 변경점
이러한 문제 해결을 위해 NamedParameterJdbcTemplate 이라는 기능이 있다.
이 기능은 순서가 아닌 파라미터의 이름으로 바인딩을 해준다. 이 기능을 활용하여 RepositoryV2를 만들어 보자.

* 생성자 부분
    private final NamedParameterJdbcTemplate jdbcTemplate;
    public JdbcTemplateItemRepositoryV2(DataSource dataSource) {
        this.jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
    }
JdbcTemplate 대신에 NamedParameterJdbcTemplate으로 필드를 수정하고 생성자도 이에 맞추어 수정하였다.
JdbcTemplate과 마찬가지로, NamedParameterJdbcTemplate 역시 내부에 dataSource가 필요하다.
스프링에서는 관례상 JdbcTemplate 관련 기능을 사용할 때 이런 식으로 dataSource를 주입하므로 별도로 직접 스프링 빈으로 등록한 후에
주입해도 상관 없긴 하다.


* SQL 내 파라미터 지시자 '?' 부분
파라미터 지시자 '?' 대신에 :파라미터명을 입력하도록 sql 문자열을 모두 수정했다.
이제 '?'는 더 이상 사용되지 않고 :파라미터명을 사용한다.

    String sql = "insert into item(item_name, price, quantity) values (:itemName,:price, :quantity)";



- JdbcTemplate 이름 지정 파라미터2
파라미터를 전달하려면 Map처럼 key-value 데이터 구조를 만들어서 전달해야 한다.
여기서 key는 :param 으로 지정한 파라미터 이름이고, value는 해당 파라미터의 값이다.
그렇게 해서 지정한 파라미터들을 jdbctemplate.update() 메서드 안에 파라미터로 전달한다.
    jdbctemplate.update(sql, param, keyHolder);

이름 지정 바인딩 방식에서 자주 사용되는 파라미터 종류는 크게 3가지이다:
   1) Map (인터페이스)
   2) SqlParameterSource (인터페이스)
      2-1) Map- (구현체)
      2-2) BeanProperty- (구현체)

1) Map
    @Override
    public Optional<Item> findById(Long id) {
        String sql = "select id, item_name, price, quantity from item where id = :id";
        try {
            Map<String, Object> param = Map.of("id", id);
            Item item = jdbcTemplate.queryForObject(sql, param, itemRowMapper());
            return Optional.of(item);
        } catch (EmptyResultDataAccessException e) {
            return Optional.empty();
        }
    }

2) MapSqlParameterSource
    @Override
    public void update(Long itemId, ItemUpdateDto updateParam) {
        String sql = "update item set item_name=:itemName, price=:price, quantity=:quantity where id=:id";
        MapSqlParameterSource param = new MapSqlParameterSource()
                .addValue("itemName", updateParam.getItemName())
                .addValue("price", updateParam.getPrice())
                .addValue("quantity", updateParam.getQuantity())
                .addValue("id", itemId);

        jdbcTemplate.update(sql, param);
    }
.addValue()를 통해 메서드 체인 사용이 가능하다.

3) BeanPropertySqlParameterSource ★
@Override
    public List<Item> findAll(ItemSearchCond cond) {
        String itemName = cond.getItemName();
        Integer maxPrice = cond.getMaxPrice();

        BeanPropertySqlParameterSource param = new BeanPropertySqlParameterSource(cond);

        String sql = "select id, item_name, price, quantity from item";

        // 동적으로 쿼리를 작성하는 부분
        if (StringUtils.hasText(itemName) || maxPrice != null) {
            sql += " where";
        }
        boolean andFlag = false;
        if (StringUtils.hasText(itemName)) {
            sql += " item_name like concat('%',:itemName,'%')";
            andFlag = true;
        }
        if (maxPrice != null) {
            if (andFlag) {
                sql += " and";
            }
            sql += " price <= :maxPrice";
        }
        log.info("sql={}", sql);

        return jdbcTemplate.query(sql, param, itemRowMapper());
    }

위와 같이, BeanPropertySqlParameterSource는 파라미터 바인딩을 한 줄로 끝내준다.
BeanPropertySqlParameterSource 생성자에 객체를 넣어주면 알아서 SQL 문자열에 있는 것에 맞는 필드에 파라미터 바인딩을 해준다.
MapSqlParameterSource의 addValue() 바인딩을 자동으로 다 해주는 거라 생각하면 된다.

다만, 엔티티 필드명과 Dto 필드명이 다른 경우에는 미스매치로 인해 사용할 수 없다. 그때는 MapSqlParameterSource이나 Map을 사용한다.
예를 들어 Item의 필드명은 id, itemName, price, quantity인데, ItemUpdateDto의 필드명에 id가 없다. 



- BeanPropertyRowMapper: 관례의 불일치 문제 자동 해결
    private RowMapper<Item> itemRowMapper() {
        return BeanPropertyRowMapper.newInstance(Item.class);   // camel 변환 지원
    }

RowMapper 반환 메서드를 더 쉽게 사용할 수 있게 해주는 매퍼 객체이다.
ResultSet의 결과를 받아서 자바 빈 규약에 맞추어 데이터를 변환시켜준다. 

자바 객체는 camelCase 표기법을 사용하나, RDBMS는 snake_case 표기법을 사용한다. 그렇다 보니
BeanPropertyRowMapper는 snake 표기법을 camel 표기법으로 자동으로 변환해준다.
따라서 select item_name 이라고 조회해도 실제로는 setItem_name()이 아닌 setItemName() 메서드로 동작한다.
그러므로 별칭은 표기법 상의 차이 때문에 달라지는 경우 말고, 아예 단어 자체가 다른 경우에 사용하면 된다.

예를 들어 DB에는 member_name이라고 저장되어 있는데, 객체에는 username이라는 필드명으로 되어 있을 경우, 
    select member_name as username 이렇게 객체 필드명을 별칭으로 정해주면 된다.



- 이름 지정 파라미터 직접 사용해보기 실습
* JdbcTemplateV2Config 파일 복붙 생성 후 아래 부분만 V1에서 V2로 수정
    @Bean
    public ItemRepository itemRepository() {
        return new JdbcTemplateItemRepositoryV2(dataSource);
    }

* 앱 실행 클래스에서 @Import 변경
    @Import(JdbcTemplateV2Config.class)
    @SpringBootApplication(scanBasePackages = "hello.itemservice.web")
    public class ItemServiceApplication {
        ....
    }

실행해보면 localhost8080 에서 모든 것들이 잘 동작함을 확인할 수 있다.



- JdbcTemplateItemRepositoryV3 변경점: SimpleJdbcInsert 기능
JdbcTemplate은 insert 쿼리를 직접 작성하지 않아도 되게 하는 SimpleJdbcInsert 라는 편리한 기능을 제공한다.
이 기능을 사용하기 위해 RepositoryV3를 생성한다.

* 필드 및 생성자
    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final SimpleJdbcInsert jdbcInsert;    // 새로운 필드

    public JdbcTemplateItemRepositoryV3(DataSource dataSource) {
        this.jdbcTemplate = new NamedParameterJdbcTemplate(dataSource);
        this.jdbcInsert = new SimpleJdbcInsert(dataSource)
                .withTableName("item")
                .usingGeneratedKeyColumns("id");
//                .usingColumns("item_name", "price", "quantity") // 생략 가능
    }


this.jdbcInsert에 대해 new 키워드와 함께 생성자를 호출할 때 파라미터로 dataSource를 넣어주어야 하고,
그 뒤에 메서드 체이닝으로 테이블명과 PK 컬럼을 지정해야 한다.

* save 메서드
    @Override
    public Item save(Item item) {
        BeanPropertySqlParameterSource param = new BeanPropertySqlParameterSource(item);
        Number key = jdbcInsert.executeAndReturnKey(param);
        item.setId(key.longValue());
        return item;
    }

insert 쿼리만 지원하는 기능이므로 save 메서드 외 다른 메서드는 변경점이 없다.

    withTableName(): 데이터를 저장할 테이블 명 문자열을 입력 받는다.
    usingGeneratedKeyColumns(): key를 생성하는 PK 컬럼명 문자열을 입력 받는다.
    usingColumns(): INSERT 쿼리에 특정 컬럼명들만 지정하고 싶을 때 사용한다. 생략할 경우 모든 컬럼이 지정된다.


이렇게 JdbcTemplate의 주요한 기능들을 알아보았다.



- JdbcTemplate 정리
실무에서 가장 간단하고 실용적인 방법으로 SQL을 사용하려면 JdbcTemplate을 사용하면 된다.
JPA와 같은 ORM 기술을 사용하면서 동시에 SQL을 직접 작성해야 할 때가 있는데, 그때 JdbcTemplate을 함께 사용하면 된다.
JdbcTemplate의 최대 단점인 동적 쿼리 문제는 MyBatis나 Querydsl로 커버할 수 있다.



